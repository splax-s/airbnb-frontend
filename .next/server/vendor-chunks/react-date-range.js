"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-date-range";
exports.ids = ["vendor-chunks/react-date-range"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-date-range/dist/accessibility/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-date-range/dist/accessibility/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ariaLabelsShape = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst ariaLabelsShape = exports.ariaLabelsShape = _propTypes.default.shape({\n    dateInput: _propTypes.default.objectOf(_propTypes.default.shape({\n        startDate: _propTypes.default.string,\n        endDate: _propTypes.default.string\n    })),\n    monthPicker: _propTypes.default.string,\n    yearPicker: _propTypes.default.string,\n    prevButton: _propTypes.default.string,\n    nextButton: _propTypes.default.string\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2FjY2Vzc2liaWxpdHkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHVCQUF1QixHQUFHLEtBQUs7QUFDL0IsSUFBSUcsYUFBYUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUM1RCxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBQzlGLE1BQU1KLGtCQUFrQkYsdUJBQXVCLEdBQUdHLFdBQVdLLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDO0lBQ3pFQyxXQUFXUCxXQUFXSyxPQUFPLENBQUNHLFFBQVEsQ0FBQ1IsV0FBV0ssT0FBTyxDQUFDQyxLQUFLLENBQUM7UUFDOURHLFdBQVdULFdBQVdLLE9BQU8sQ0FBQ0ssTUFBTTtRQUNwQ0MsU0FBU1gsV0FBV0ssT0FBTyxDQUFDSyxNQUFNO0lBQ3BDO0lBQ0FFLGFBQWFaLFdBQVdLLE9BQU8sQ0FBQ0ssTUFBTTtJQUN0Q0csWUFBWWIsV0FBV0ssT0FBTyxDQUFDSyxNQUFNO0lBQ3JDSSxZQUFZZCxXQUFXSyxPQUFPLENBQUNLLE1BQU07SUFDckNLLFlBQVlmLFdBQVdLLE9BQU8sQ0FBQ0ssTUFBTTtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2RqYW5nb2JuYi8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlLXJhbmdlL2Rpc3QvYWNjZXNzaWJpbGl0eS9pbmRleC5qcz8zNzAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcmlhTGFiZWxzU2hhcGUgPSB2b2lkIDA7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmNvbnN0IGFyaWFMYWJlbHNTaGFwZSA9IGV4cG9ydHMuYXJpYUxhYmVsc1NoYXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZGF0ZUlucHV0OiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0T2YoX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBzdGFydERhdGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gICAgZW5kRGF0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xuICB9KSksXG4gIG1vbnRoUGlja2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICB5ZWFyUGlja2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBwcmV2QnV0dG9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBuZXh0QnV0dG9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59KTsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhcmlhTGFiZWxzU2hhcGUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInNoYXBlIiwiZGF0ZUlucHV0Iiwib2JqZWN0T2YiLCJzdGFydERhdGUiLCJzdHJpbmciLCJlbmREYXRlIiwibW9udGhQaWNrZXIiLCJ5ZWFyUGlja2VyIiwicHJldkJ1dHRvbiIsIm5leHRCdXR0b24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/accessibility/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/Calendar/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _Month = _interopRequireDefault(__webpack_require__(/*! ../Month */ \"(ssr)/./node_modules/react-date-range/dist/components/Month/index.js\"));\nvar _DateInput = _interopRequireDefault(__webpack_require__(/*! ../DateInput */ \"(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js\"));\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _reactList = _interopRequireDefault(__webpack_require__(/*! react-list */ \"(ssr)/./node_modules/react-list/react-list.js\"));\nvar _shallowEqual = __webpack_require__(/*! shallow-equal */ \"(ssr)/./node_modules/shallow-equal/dist/index.esm.js\");\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nvar _enUS = __webpack_require__(/*! date-fns/locale/en-US */ \"(ssr)/./node_modules/date-fns/locale/en-US.js\");\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nvar _accessibility = __webpack_require__(/*! ../../accessibility */ \"(ssr)/./node_modules/react-date-range/dist/accessibility/index.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nclass Calendar extends _react.PureComponent {\n    constructor(_props, context){\n        var _this;\n        super(_props, context);\n        _this = this;\n        _defineProperty(this, \"focusToDate\", function(date) {\n            let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;\n            let preventUnnecessary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n            if (!props.scroll.enabled) {\n                if (preventUnnecessary && props.preventSnapRefocus) {\n                    const focusedDateDiff = (0, _dateFns.differenceInCalendarMonths)(date, _this.state.focusedDate);\n                    const isAllowedForward = props.calendarFocus === \"forwards\" && focusedDateDiff >= 0;\n                    const isAllowedBackward = props.calendarFocus === \"backwards\" && focusedDateDiff <= 0;\n                    if ((isAllowedForward || isAllowedBackward) && Math.abs(focusedDateDiff) < props.months) {\n                        return;\n                    }\n                }\n                _this.setState({\n                    focusedDate: date\n                });\n                return;\n            }\n            const targetMonthIndex = (0, _dateFns.differenceInCalendarMonths)(date, props.minDate, _this.dateOptions);\n            const visibleMonths = _this.list.getVisibleRange();\n            if (preventUnnecessary && visibleMonths.includes(targetMonthIndex)) return;\n            _this.isFirstRender = true;\n            _this.list.scrollTo(targetMonthIndex);\n            _this.setState({\n                focusedDate: date\n            });\n        });\n        _defineProperty(this, \"updateShownDate\", function() {\n            let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n            const newProps = props.scroll.enabled ? {\n                ...props,\n                months: _this.list.getVisibleRange().length\n            } : props;\n            const newFocus = (0, _utils.calcFocusDate)(_this.state.focusedDate, newProps);\n            _this.focusToDate(newFocus, newProps);\n        });\n        _defineProperty(this, \"updatePreview\", (val)=>{\n            if (!val) {\n                this.setState({\n                    preview: null\n                });\n                return;\n            }\n            const preview = {\n                startDate: val,\n                endDate: val,\n                color: this.props.color\n            };\n            this.setState({\n                preview\n            });\n        });\n        _defineProperty(this, \"changeShownDate\", function(value) {\n            let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"set\";\n            const { focusedDate } = _this.state;\n            const { onShownDateChange, minDate, maxDate } = _this.props;\n            const modeMapper = {\n                monthOffset: ()=>(0, _dateFns.addMonths)(focusedDate, value),\n                setMonth: ()=>(0, _dateFns.setMonth)(focusedDate, value),\n                setYear: ()=>(0, _dateFns.setYear)(focusedDate, value),\n                set: ()=>value\n            };\n            const newDate = (0, _dateFns.min)([\n                (0, _dateFns.max)([\n                    modeMapper[mode](),\n                    minDate\n                ]),\n                maxDate\n            ]);\n            _this.focusToDate(newDate, _this.props, false);\n            onShownDateChange && onShownDateChange(newDate);\n        });\n        _defineProperty(this, \"handleRangeFocusChange\", (rangesIndex, rangeItemIndex)=>{\n            this.props.onRangeFocusChange && this.props.onRangeFocusChange([\n                rangesIndex,\n                rangeItemIndex\n            ]);\n        });\n        _defineProperty(this, \"handleScroll\", ()=>{\n            const { onShownDateChange, minDate } = this.props;\n            const { focusedDate } = this.state;\n            const { isFirstRender } = this;\n            const visibleMonths = this.list.getVisibleRange();\n            // prevent scroll jump with wrong visible value\n            if (visibleMonths[0] === undefined) return;\n            const visibleMonth = (0, _dateFns.addMonths)(minDate, visibleMonths[0] || 0);\n            const isFocusedToDifferent = !(0, _dateFns.isSameMonth)(visibleMonth, focusedDate);\n            if (isFocusedToDifferent && !isFirstRender) {\n                this.setState({\n                    focusedDate: visibleMonth\n                });\n                onShownDateChange && onShownDateChange(visibleMonth);\n            }\n            this.isFirstRender = false;\n        });\n        _defineProperty(this, \"renderMonthAndYear\", (focusedDate, changeShownDate, props)=>{\n            const { showMonthArrow, minDate, maxDate, showMonthAndYearPickers, ariaLabels } = props;\n            const upperYearLimit = (maxDate || Calendar.defaultProps.maxDate).getFullYear();\n            const lowerYearLimit = (minDate || Calendar.defaultProps.minDate).getFullYear();\n            const styles = this.styles;\n            return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                onMouseUp: (e)=>e.stopPropagation(),\n                className: styles.monthAndYearWrapper\n            }, showMonthArrow ? /*#__PURE__*/ _react.default.createElement(\"button\", {\n                type: \"button\",\n                className: (0, _classnames.default)(styles.nextPrevButton, styles.prevButton),\n                onClick: ()=>changeShownDate(-1, \"monthOffset\"),\n                \"aria-label\": ariaLabels.prevButton\n            }, /*#__PURE__*/ _react.default.createElement(\"i\", null)) : null, showMonthAndYearPickers ? /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearPickers\n            }, /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthPicker\n            }, /*#__PURE__*/ _react.default.createElement(\"select\", {\n                value: focusedDate.getMonth(),\n                onChange: (e)=>changeShownDate(e.target.value, \"setMonth\"),\n                \"aria-label\": ariaLabels.monthPicker\n            }, this.state.monthNames.map((monthName, i)=>/*#__PURE__*/ _react.default.createElement(\"option\", {\n                    key: i,\n                    value: i\n                }, monthName)))), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearDivider\n            }), /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.yearPicker\n            }, /*#__PURE__*/ _react.default.createElement(\"select\", {\n                value: focusedDate.getFullYear(),\n                onChange: (e)=>changeShownDate(e.target.value, \"setYear\"),\n                \"aria-label\": ariaLabels.yearPicker\n            }, new Array(upperYearLimit - lowerYearLimit + 1).fill(upperYearLimit).map((val, i)=>{\n                const year = val - i;\n                return /*#__PURE__*/ _react.default.createElement(\"option\", {\n                    key: year,\n                    value: year\n                }, year);\n            })))) : /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: styles.monthAndYearPickers\n            }, this.state.monthNames[focusedDate.getMonth()], \" \", focusedDate.getFullYear()), showMonthArrow ? /*#__PURE__*/ _react.default.createElement(\"button\", {\n                type: \"button\",\n                className: (0, _classnames.default)(styles.nextPrevButton, styles.nextButton),\n                onClick: ()=>changeShownDate(+1, \"monthOffset\"),\n                \"aria-label\": ariaLabels.nextButton\n            }, /*#__PURE__*/ _react.default.createElement(\"i\", null)) : null);\n        });\n        _defineProperty(this, \"renderDateDisplay\", ()=>{\n            const { focusedRange, color, ranges, rangeColors, dateDisplayFormat, editableDateInputs, startDatePlaceholder, endDatePlaceholder, ariaLabels } = this.props;\n            const defaultColor = rangeColors[focusedRange[0]] || color;\n            const styles = this.styles;\n            return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                className: styles.dateDisplayWrapper\n            }, ranges.map((range, i)=>{\n                if (range.showDateDisplay === false || range.disabled && !range.showDateDisplay) return null;\n                return /*#__PURE__*/ _react.default.createElement(\"div\", {\n                    className: styles.dateDisplay,\n                    key: i,\n                    style: {\n                        color: range.color || defaultColor\n                    }\n                }, /*#__PURE__*/ _react.default.createElement(_DateInput.default, {\n                    className: (0, _classnames.default)(styles.dateDisplayItem, {\n                        [styles.dateDisplayItemActive]: focusedRange[0] === i && focusedRange[1] === 0\n                    }),\n                    readOnly: !editableDateInputs,\n                    disabled: range.disabled,\n                    value: range.startDate,\n                    placeholder: startDatePlaceholder,\n                    dateOptions: this.dateOptions,\n                    dateDisplayFormat: dateDisplayFormat,\n                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].startDate,\n                    onChange: this.onDragSelectionEnd,\n                    onFocus: ()=>this.handleRangeFocusChange(i, 0)\n                }), /*#__PURE__*/ _react.default.createElement(_DateInput.default, {\n                    className: (0, _classnames.default)(styles.dateDisplayItem, {\n                        [styles.dateDisplayItemActive]: focusedRange[0] === i && focusedRange[1] === 1\n                    }),\n                    readOnly: !editableDateInputs,\n                    disabled: range.disabled,\n                    value: range.endDate,\n                    placeholder: endDatePlaceholder,\n                    dateOptions: this.dateOptions,\n                    dateDisplayFormat: dateDisplayFormat,\n                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].endDate,\n                    onChange: this.onDragSelectionEnd,\n                    onFocus: ()=>this.handleRangeFocusChange(i, 1)\n                }));\n            }));\n        });\n        _defineProperty(this, \"onDragSelectionStart\", (date)=>{\n            const { onChange, dragSelectionEnabled } = this.props;\n            if (dragSelectionEnabled) {\n                this.setState({\n                    drag: {\n                        status: true,\n                        range: {\n                            startDate: date,\n                            endDate: date\n                        },\n                        disablePreview: true\n                    }\n                });\n            } else {\n                onChange && onChange(date);\n            }\n        });\n        _defineProperty(this, \"onDragSelectionEnd\", (date)=>{\n            const { updateRange, displayMode, onChange, dragSelectionEnabled } = this.props;\n            if (!dragSelectionEnabled) return;\n            if (displayMode === \"date\" || !this.state.drag.status) {\n                onChange && onChange(date);\n                return;\n            }\n            const newRange = {\n                startDate: this.state.drag.range.startDate,\n                endDate: date\n            };\n            if (displayMode !== \"dateRange\" || (0, _dateFns.isSameDay)(newRange.startDate, date)) {\n                this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                }, ()=>onChange && onChange(date));\n            } else {\n                this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                }, ()=>{\n                    updateRange && updateRange(newRange);\n                });\n            }\n        });\n        _defineProperty(this, \"onDragSelectionMove\", (date)=>{\n            const { drag } = this.state;\n            if (!drag.status || !this.props.dragSelectionEnabled) return;\n            this.setState({\n                drag: {\n                    status: drag.status,\n                    range: {\n                        startDate: drag.range.startDate,\n                        endDate: date\n                    },\n                    disablePreview: true\n                }\n            });\n        });\n        _defineProperty(this, \"estimateMonthSize\", (index, cache)=>{\n            const { direction, minDate } = this.props;\n            const { scrollArea } = this.state;\n            if (cache) {\n                this.listSizeCache = cache;\n                if (cache[index]) return cache[index];\n            }\n            if (direction === \"horizontal\") return scrollArea.monthWidth;\n            const monthStep = (0, _dateFns.addMonths)(minDate, index);\n            const { start, end } = (0, _utils.getMonthDisplayRange)(monthStep, this.dateOptions);\n            const isLongMonth = (0, _dateFns.differenceInDays)(end, start, this.dateOptions) + 1 > 7 * 5;\n            return isLongMonth ? scrollArea.longMonthHeight : scrollArea.monthHeight;\n        });\n        this.dateOptions = {\n            locale: _props.locale\n        };\n        if (_props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = _props.weekStartsOn;\n        this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            _props.classNames\n        ]);\n        this.listSizeCache = {};\n        this.isFirstRender = true;\n        this.state = {\n            monthNames: this.getMonthNames(),\n            focusedDate: (0, _utils.calcFocusDate)(null, _props),\n            drag: {\n                status: false,\n                range: {\n                    startDate: null,\n                    endDate: null\n                },\n                disablePreview: false\n            },\n            scrollArea: this.calcScrollArea(_props)\n        };\n    }\n    getMonthNames() {\n        return [\n            ...Array(12).keys()\n        ].map((i)=>this.props.locale.localize.month(i));\n    }\n    calcScrollArea(props) {\n        const { direction, months, scroll } = props;\n        if (!scroll.enabled) return {\n            enabled: false\n        };\n        const longMonthHeight = scroll.longMonthHeight || scroll.monthHeight;\n        if (direction === \"vertical\") {\n            return {\n                enabled: true,\n                monthHeight: scroll.monthHeight || 220,\n                longMonthHeight: longMonthHeight || 260,\n                calendarWidth: \"auto\",\n                calendarHeight: (scroll.calendarHeight || longMonthHeight || 240) * months\n            };\n        }\n        return {\n            enabled: true,\n            monthWidth: scroll.monthWidth || 332,\n            calendarWidth: (scroll.calendarWidth || scroll.monthWidth || 332) * months,\n            monthHeight: longMonthHeight || 300,\n            calendarHeight: longMonthHeight || 300\n        };\n    }\n    componentDidMount() {\n        if (this.props.scroll.enabled) {\n            // prevent react-list's initial render focus problem\n            setTimeout(()=>this.focusToDate(this.state.focusedDate));\n        }\n    }\n    componentDidUpdate(prevProps) {\n        const propMapper = {\n            dateRange: \"ranges\",\n            date: \"date\"\n        };\n        const targetProp = propMapper[this.props.displayMode];\n        if (this.props[targetProp] !== prevProps[targetProp]) {\n            this.updateShownDate(this.props);\n        }\n        if (prevProps.locale !== this.props.locale || prevProps.weekStartsOn !== this.props.weekStartsOn) {\n            this.dateOptions = {\n                locale: this.props.locale\n            };\n            if (this.props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = this.props.weekStartsOn;\n            this.setState({\n                monthNames: this.getMonthNames()\n            });\n        }\n        if (!(0, _shallowEqual.shallowEqualObjects)(prevProps.scroll, this.props.scroll)) {\n            this.setState({\n                scrollArea: this.calcScrollArea(this.props)\n            });\n        }\n    }\n    renderWeekdays() {\n        const now = new Date();\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: this.styles.weekDays\n        }, (0, _dateFns.eachDayOfInterval)({\n            start: (0, _dateFns.startOfWeek)(now, this.dateOptions),\n            end: (0, _dateFns.endOfWeek)(now, this.dateOptions)\n        }).map((day, i)=>/*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: this.styles.weekDay,\n                key: i\n            }, (0, _dateFns.format)(day, this.props.weekdayDisplayFormat, this.dateOptions))));\n    }\n    render() {\n        const { showDateDisplay, onPreviewChange, scroll, direction, disabledDates, disabledDay, maxDate, minDate, rangeColors, color, navigatorRenderer, className, preview } = this.props;\n        const { scrollArea, focusedDate } = this.state;\n        const isVertical = direction === \"vertical\";\n        const monthAndYearRenderer = navigatorRenderer || this.renderMonthAndYear;\n        const ranges = this.props.ranges.map((range, i)=>({\n                ...range,\n                color: range.color || rangeColors[i] || color\n            }));\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: (0, _classnames.default)(this.styles.calendarWrapper, className),\n            onMouseUp: ()=>this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                }),\n            onMouseLeave: ()=>{\n                this.setState({\n                    drag: {\n                        status: false,\n                        range: {}\n                    }\n                });\n            }\n        }, showDateDisplay && this.renderDateDisplay(), monthAndYearRenderer(focusedDate, this.changeShownDate, this.props), scroll.enabled ? /*#__PURE__*/ _react.default.createElement(\"div\", null, isVertical && this.renderWeekdays(this.dateOptions), /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: (0, _classnames.default)(this.styles.infiniteMonths, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal),\n            onMouseLeave: ()=>onPreviewChange && onPreviewChange(),\n            style: {\n                width: scrollArea.calendarWidth + 11,\n                height: scrollArea.calendarHeight + 11\n            },\n            onScroll: this.handleScroll\n        }, /*#__PURE__*/ _react.default.createElement(_reactList.default, {\n            length: (0, _dateFns.differenceInCalendarMonths)((0, _dateFns.endOfMonth)(maxDate), (0, _dateFns.addDays)((0, _dateFns.startOfMonth)(minDate), -1), this.dateOptions),\n            treshold: 500,\n            type: \"variable\",\n            ref: (target)=>this.list = target,\n            itemSizeEstimator: this.estimateMonthSize,\n            axis: isVertical ? \"y\" : \"x\",\n            itemRenderer: (index, key)=>{\n                const monthStep = (0, _dateFns.addMonths)(minDate, index);\n                return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, this.props, {\n                    onPreviewChange: onPreviewChange || this.updatePreview,\n                    preview: preview || this.state.preview,\n                    ranges: ranges,\n                    key: key,\n                    drag: this.state.drag,\n                    dateOptions: this.dateOptions,\n                    disabledDates: disabledDates,\n                    disabledDay: disabledDay,\n                    month: monthStep,\n                    onDragSelectionStart: this.onDragSelectionStart,\n                    onDragSelectionEnd: this.onDragSelectionEnd,\n                    onDragSelectionMove: this.onDragSelectionMove,\n                    onMouseLeave: ()=>onPreviewChange && onPreviewChange(),\n                    styles: this.styles,\n                    style: isVertical ? {\n                        height: this.estimateMonthSize(index)\n                    } : {\n                        height: scrollArea.monthHeight,\n                        width: this.estimateMonthSize(index)\n                    },\n                    showMonthName: true,\n                    showWeekDays: !isVertical\n                }));\n            }\n        }))) : /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: (0, _classnames.default)(this.styles.months, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal)\n        }, new Array(this.props.months).fill(null).map((_, i)=>{\n            let monthStep = (0, _dateFns.addMonths)(this.state.focusedDate, i);\n            if (this.props.calendarFocus === \"backwards\") {\n                monthStep = (0, _dateFns.subMonths)(this.state.focusedDate, this.props.months - 1 - i);\n            }\n            return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, this.props, {\n                onPreviewChange: onPreviewChange || this.updatePreview,\n                preview: preview || this.state.preview,\n                ranges: ranges,\n                key: i,\n                drag: this.state.drag,\n                dateOptions: this.dateOptions,\n                disabledDates: disabledDates,\n                disabledDay: disabledDay,\n                month: monthStep,\n                onDragSelectionStart: this.onDragSelectionStart,\n                onDragSelectionEnd: this.onDragSelectionEnd,\n                onDragSelectionMove: this.onDragSelectionMove,\n                onMouseLeave: ()=>onPreviewChange && onPreviewChange(),\n                styles: this.styles,\n                showWeekDays: !isVertical || i === 0,\n                showMonthName: !isVertical || i > 0\n            }));\n        })));\n    }\n}\nCalendar.defaultProps = {\n    showMonthArrow: true,\n    showMonthAndYearPickers: true,\n    disabledDates: [],\n    disabledDay: ()=>{},\n    classNames: {},\n    locale: _enUS.enUS,\n    ranges: [],\n    focusedRange: [\n        0,\n        0\n    ],\n    dateDisplayFormat: \"MMM d, yyyy\",\n    monthDisplayFormat: \"MMM yyyy\",\n    weekdayDisplayFormat: \"E\",\n    dayDisplayFormat: \"d\",\n    showDateDisplay: true,\n    showPreview: true,\n    displayMode: \"date\",\n    months: 1,\n    color: \"#3d91ff\",\n    scroll: {\n        enabled: false\n    },\n    direction: \"vertical\",\n    maxDate: (0, _dateFns.addYears)(new Date(), 20),\n    minDate: (0, _dateFns.addYears)(new Date(), -100),\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    startDatePlaceholder: \"Early\",\n    endDatePlaceholder: \"Continuous\",\n    editableDateInputs: false,\n    dragSelectionEnabled: true,\n    fixedHeight: false,\n    calendarFocus: \"forwards\",\n    preventSnapRefocus: false,\n    ariaLabels: {}\n};\nCalendar.propTypes = {\n    showMonthArrow: _propTypes.default.bool,\n    showMonthAndYearPickers: _propTypes.default.bool,\n    disabledDates: _propTypes.default.array,\n    disabledDay: _propTypes.default.func,\n    minDate: _propTypes.default.object,\n    maxDate: _propTypes.default.object,\n    date: _propTypes.default.object,\n    onChange: _propTypes.default.func,\n    onPreviewChange: _propTypes.default.func,\n    onRangeFocusChange: _propTypes.default.func,\n    classNames: _propTypes.default.object,\n    locale: _propTypes.default.object,\n    shownDate: _propTypes.default.object,\n    onShownDateChange: _propTypes.default.func,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object,\n        color: _propTypes.default.string\n    }),\n    dateDisplayFormat: _propTypes.default.string,\n    monthDisplayFormat: _propTypes.default.string,\n    weekdayDisplayFormat: _propTypes.default.string,\n    weekStartsOn: _propTypes.default.number,\n    dayDisplayFormat: _propTypes.default.string,\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    initialFocusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    months: _propTypes.default.number,\n    className: _propTypes.default.string,\n    showDateDisplay: _propTypes.default.bool,\n    showPreview: _propTypes.default.bool,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    color: _propTypes.default.string,\n    updateRange: _propTypes.default.func,\n    scroll: _propTypes.default.shape({\n        enabled: _propTypes.default.bool,\n        monthHeight: _propTypes.default.number,\n        longMonthHeight: _propTypes.default.number,\n        monthWidth: _propTypes.default.number,\n        calendarWidth: _propTypes.default.number,\n        calendarHeight: _propTypes.default.number\n    }),\n    direction: _propTypes.default.oneOf([\n        \"vertical\",\n        \"horizontal\"\n    ]),\n    startDatePlaceholder: _propTypes.default.string,\n    endDatePlaceholder: _propTypes.default.string,\n    navigatorRenderer: _propTypes.default.func,\n    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),\n    editableDateInputs: _propTypes.default.bool,\n    dragSelectionEnabled: _propTypes.default.bool,\n    fixedHeight: _propTypes.default.bool,\n    calendarFocus: _propTypes.default.string,\n    preventSnapRefocus: _propTypes.default.bool,\n    ariaLabels: _accessibility.ariaLabelsShape\n};\nvar _default = exports[\"default\"] = Calendar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateInput/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nclass DateInput extends _react.PureComponent {\n    constructor(props, context){\n        super(props, context);\n        _defineProperty(this, \"onKeyDown\", (e)=>{\n            const { value } = this.state;\n            if (e.key === \"Enter\") {\n                this.update(value);\n            }\n        });\n        _defineProperty(this, \"onChange\", (e)=>{\n            this.setState({\n                value: e.target.value,\n                changed: true,\n                invalid: false\n            });\n        });\n        _defineProperty(this, \"onBlur\", ()=>{\n            const { value } = this.state;\n            this.update(value);\n        });\n        this.state = {\n            invalid: false,\n            changed: false,\n            value: this.formatDate(props)\n        };\n    }\n    componentDidUpdate(prevProps) {\n        const { value } = prevProps;\n        if (!(0, _dateFns.isEqual)(value, this.props.value)) {\n            this.setState({\n                value: this.formatDate(this.props)\n            });\n        }\n    }\n    formatDate(_ref) {\n        let { value, dateDisplayFormat, dateOptions } = _ref;\n        if (value && (0, _dateFns.isValid)(value)) {\n            return (0, _dateFns.format)(value, dateDisplayFormat, dateOptions);\n        }\n        return \"\";\n    }\n    update(value) {\n        const { invalid, changed } = this.state;\n        if (invalid || !changed || !value) {\n            return;\n        }\n        const { onChange, dateDisplayFormat, dateOptions } = this.props;\n        const parsed = (0, _dateFns.parse)(value, dateDisplayFormat, new Date(), dateOptions);\n        if ((0, _dateFns.isValid)(parsed)) {\n            this.setState({\n                changed: false\n            }, ()=>onChange(parsed));\n        } else {\n            this.setState({\n                invalid: true\n            });\n        }\n    }\n    render() {\n        const { className, readOnly, placeholder, ariaLabel, disabled, onFocus } = this.props;\n        const { value, invalid } = this.state;\n        return /*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: (0, _classnames.default)(\"rdrDateInput\", className)\n        }, /*#__PURE__*/ _react.default.createElement(\"input\", {\n            readOnly: readOnly,\n            disabled: disabled,\n            value: value,\n            placeholder: placeholder,\n            \"aria-label\": ariaLabel,\n            onKeyDown: this.onKeyDown,\n            onChange: this.onChange,\n            onBlur: this.onBlur,\n            onFocus: onFocus\n        }), invalid && /*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: \"rdrWarning\"\n        }, \"⚠\"));\n    }\n}\nDateInput.propTypes = {\n    value: _propTypes.default.object,\n    placeholder: _propTypes.default.string,\n    disabled: _propTypes.default.bool,\n    readOnly: _propTypes.default.bool,\n    dateOptions: _propTypes.default.object,\n    dateDisplayFormat: _propTypes.default.string,\n    ariaLabel: _propTypes.default.string,\n    className: _propTypes.default.string,\n    onFocus: _propTypes.default.func.isRequired,\n    onChange: _propTypes.default.func.isRequired\n};\nDateInput.defaultProps = {\n    readOnly: true,\n    disabled: false,\n    dateDisplayFormat: \"MMM D, YYYY\"\n};\nvar _default = exports[\"default\"] = DateInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateInput/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateRange/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _Calendar = _interopRequireDefault(__webpack_require__(/*! ../Calendar */ \"(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\"));\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nclass DateRange extends _react.Component {\n    constructor(props, context){\n        var _this;\n        super(props, context);\n        _this = this;\n        _defineProperty(this, \"calcNewSelection\", function(value) {\n            let isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n            const focusedRange = _this.props.focusedRange || _this.state.focusedRange;\n            const { ranges, onChange, maxDate, moveRangeOnFirstSelection, retainEndDateOnFirstSelection, disabledDates } = _this.props;\n            const focusedRangeIndex = focusedRange[0];\n            const selectedRange = ranges[focusedRangeIndex];\n            if (!selectedRange || !onChange) return {};\n            let { startDate, endDate } = selectedRange;\n            const now = new Date();\n            let nextFocusRange;\n            if (!isSingleValue) {\n                startDate = value.startDate;\n                endDate = value.endDate;\n            } else if (focusedRange[1] === 0) {\n                // startDate selection\n                const dayOffset = (0, _dateFns.differenceInCalendarDays)(endDate || now, startDate);\n                const calculateEndDate = ()=>{\n                    if (moveRangeOnFirstSelection) {\n                        return (0, _dateFns.addDays)(value, dayOffset);\n                    }\n                    if (retainEndDateOnFirstSelection) {\n                        if (!endDate || (0, _dateFns.isBefore)(value, endDate)) {\n                            return endDate;\n                        }\n                        return value;\n                    }\n                    return value || now;\n                };\n                startDate = value;\n                endDate = calculateEndDate();\n                if (maxDate) endDate = (0, _dateFns.min)([\n                    endDate,\n                    maxDate\n                ]);\n                nextFocusRange = [\n                    focusedRange[0],\n                    1\n                ];\n            } else {\n                endDate = value;\n            }\n            // reverse dates if startDate before endDate\n            let isStartDateSelected = focusedRange[1] === 0;\n            if ((0, _dateFns.isBefore)(endDate, startDate)) {\n                isStartDateSelected = !isStartDateSelected;\n                [startDate, endDate] = [\n                    endDate,\n                    startDate\n                ];\n            }\n            const inValidDatesWithinRange = disabledDates.filter((disabledDate)=>(0, _dateFns.isWithinInterval)(disabledDate, {\n                    start: startDate,\n                    end: endDate\n                }));\n            if (inValidDatesWithinRange.length > 0) {\n                if (isStartDateSelected) {\n                    startDate = (0, _dateFns.addDays)((0, _dateFns.max)(inValidDatesWithinRange), 1);\n                } else {\n                    endDate = (0, _dateFns.addDays)((0, _dateFns.min)(inValidDatesWithinRange), -1);\n                }\n            }\n            if (!nextFocusRange) {\n                const nextFocusRangeIndex = (0, _utils.findNextRangeIndex)(_this.props.ranges, focusedRange[0]);\n                nextFocusRange = [\n                    nextFocusRangeIndex,\n                    0\n                ];\n            }\n            return {\n                wasValid: !(inValidDatesWithinRange.length > 0),\n                range: {\n                    startDate,\n                    endDate\n                },\n                nextFocusRange: nextFocusRange\n            };\n        });\n        _defineProperty(this, \"setSelection\", (value, isSingleValue)=>{\n            const { onChange, ranges, onRangeFocusChange } = this.props;\n            const focusedRange = this.props.focusedRange || this.state.focusedRange;\n            const focusedRangeIndex = focusedRange[0];\n            const selectedRange = ranges[focusedRangeIndex];\n            if (!selectedRange) return;\n            const newSelection = this.calcNewSelection(value, isSingleValue);\n            onChange({\n                [selectedRange.key || `range${focusedRangeIndex + 1}`]: {\n                    ...selectedRange,\n                    ...newSelection.range\n                }\n            });\n            this.setState({\n                focusedRange: newSelection.nextFocusRange,\n                preview: null\n            });\n            onRangeFocusChange && onRangeFocusChange(newSelection.nextFocusRange);\n        });\n        _defineProperty(this, \"handleRangeFocusChange\", (focusedRange)=>{\n            this.setState({\n                focusedRange\n            });\n            this.props.onRangeFocusChange && this.props.onRangeFocusChange(focusedRange);\n        });\n        _defineProperty(this, \"updatePreview\", (val)=>{\n            if (!val) {\n                this.setState({\n                    preview: null\n                });\n                return;\n            }\n            const { rangeColors, ranges } = this.props;\n            const focusedRange = this.props.focusedRange || this.state.focusedRange;\n            const color = ranges[focusedRange[0]]?.color || rangeColors[focusedRange[0]] || color;\n            this.setState({\n                preview: {\n                    ...val.range,\n                    color\n                }\n            });\n        });\n        this.state = {\n            focusedRange: props.initialFocusedRange || [\n                (0, _utils.findNextRangeIndex)(props.ranges),\n                0\n            ],\n            preview: null\n        };\n        this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            props.classNames\n        ]);\n    }\n    render() {\n        return /*#__PURE__*/ _react.default.createElement(_Calendar.default, _extends({\n            focusedRange: this.state.focusedRange,\n            onRangeFocusChange: this.handleRangeFocusChange,\n            preview: this.state.preview,\n            onPreviewChange: (value)=>{\n                this.updatePreview(value ? this.calcNewSelection(value) : null);\n            }\n        }, this.props, {\n            displayMode: \"dateRange\",\n            className: (0, _classnames.default)(this.styles.dateRangeWrapper, this.props.className),\n            onChange: this.setSelection,\n            updateRange: (val)=>this.setSelection(val, false),\n            ref: (target)=>{\n                this.calendar = target;\n            }\n        }));\n    }\n}\nDateRange.defaultProps = {\n    classNames: {},\n    ranges: [],\n    moveRangeOnFirstSelection: false,\n    retainEndDateOnFirstSelection: false,\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    disabledDates: []\n};\nDateRange.propTypes = {\n    ..._Calendar.default.propTypes,\n    onChange: _propTypes.default.func,\n    onRangeFocusChange: _propTypes.default.func,\n    className: _propTypes.default.string,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    moveRangeOnFirstSelection: _propTypes.default.bool,\n    retainEndDateOnFirstSelection: _propTypes.default.bool\n};\nvar _default = exports[\"default\"] = DateRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DateRangePicker/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DateRange = _interopRequireDefault(__webpack_require__(/*! ../DateRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\"));\nvar _DefinedRange = _interopRequireDefault(__webpack_require__(/*! ../DefinedRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\"));\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nclass DateRangePicker extends _react.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            focusedRange: [\n                (0, _utils.findNextRangeIndex)(props.ranges),\n                0\n            ]\n        };\n        this.styles = (0, _utils.generateStyles)([\n            _styles.default,\n            props.classNames\n        ]);\n    }\n    render() {\n        const { focusedRange } = this.state;\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: (0, _classnames.default)(this.styles.dateRangePickerWrapper, this.props.className)\n        }, /*#__PURE__*/ _react.default.createElement(_DefinedRange.default, _extends({\n            focusedRange: focusedRange,\n            onPreviewChange: (value)=>this.dateRange.updatePreview(value ? this.dateRange.calcNewSelection(value, typeof value === \"string\") : null)\n        }, this.props, {\n            range: this.props.ranges[focusedRange[0]],\n            className: undefined\n        })), /*#__PURE__*/ _react.default.createElement(_DateRange.default, _extends({\n            onRangeFocusChange: (focusedRange)=>this.setState({\n                    focusedRange\n                }),\n            focusedRange: focusedRange\n        }, this.props, {\n            ref: (t)=>this.dateRange = t,\n            className: undefined\n        })));\n    }\n}\nDateRangePicker.defaultProps = {};\nDateRangePicker.propTypes = {\n    ..._DateRange.default.propTypes,\n    ..._DefinedRange.default.propTypes,\n    className: _propTypes.default.string\n};\nvar _default = exports[\"default\"] = DateRangePicker;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DayCell/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.rangeShape = exports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n} /* eslint-disable no-fallthrough */ \nclass DayCell extends _react.Component {\n    constructor(props, context){\n        super(props, context);\n        _defineProperty(this, \"handleKeyEvent\", (event)=>{\n            const { day, onMouseDown, onMouseUp } = this.props;\n            if ([\n                13 /* space */ ,\n                32 /* enter */ \n            ].includes(event.keyCode)) {\n                if (event.type === \"keydown\") onMouseDown(day);\n                else onMouseUp(day);\n            }\n        });\n        _defineProperty(this, \"handleMouseEvent\", (event)=>{\n            const { day, disabled, onPreviewChange, onMouseEnter, onMouseDown, onMouseUp } = this.props;\n            const stateChanges = {};\n            if (disabled) {\n                onPreviewChange();\n                return;\n            }\n            switch(event.type){\n                case \"mouseenter\":\n                    onMouseEnter(day);\n                    onPreviewChange(day);\n                    stateChanges.hover = true;\n                    break;\n                case \"blur\":\n                case \"mouseleave\":\n                    stateChanges.hover = false;\n                    break;\n                case \"mousedown\":\n                    stateChanges.active = true;\n                    onMouseDown(day);\n                    break;\n                case \"mouseup\":\n                    event.stopPropagation();\n                    stateChanges.active = false;\n                    onMouseUp(day);\n                    break;\n                case \"focus\":\n                    onPreviewChange(day);\n                    break;\n            }\n            if (Object.keys(stateChanges).length) {\n                this.setState(stateChanges);\n            }\n        });\n        _defineProperty(this, \"getClassNames\", ()=>{\n            const { isPassive, isToday, isWeekend, isStartOfWeek, isEndOfWeek, isStartOfMonth, isEndOfMonth, disabled, styles } = this.props;\n            return (0, _classnames.default)(styles.day, {\n                [styles.dayPassive]: isPassive,\n                [styles.dayDisabled]: disabled,\n                [styles.dayToday]: isToday,\n                [styles.dayWeekend]: isWeekend,\n                [styles.dayStartOfWeek]: isStartOfWeek,\n                [styles.dayEndOfWeek]: isEndOfWeek,\n                [styles.dayStartOfMonth]: isStartOfMonth,\n                [styles.dayEndOfMonth]: isEndOfMonth,\n                [styles.dayHovered]: this.state.hover,\n                [styles.dayActive]: this.state.active\n            });\n        });\n        _defineProperty(this, \"renderPreviewPlaceholder\", ()=>{\n            const { preview, day, styles } = this.props;\n            if (!preview) return null;\n            const startDate = preview.startDate ? (0, _dateFns.endOfDay)(preview.startDate) : null;\n            const endDate = preview.endDate ? (0, _dateFns.startOfDay)(preview.endDate) : null;\n            const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));\n            const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);\n            const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);\n            return /*#__PURE__*/ _react.default.createElement(\"span\", {\n                className: (0, _classnames.default)({\n                    [styles.dayStartPreview]: isStartEdge,\n                    [styles.dayInPreview]: isInRange,\n                    [styles.dayEndPreview]: isEndEdge\n                }),\n                style: {\n                    color: preview.color\n                }\n            });\n        });\n        _defineProperty(this, \"renderSelectionPlaceholders\", ()=>{\n            const { styles, ranges, day } = this.props;\n            if (this.props.displayMode === \"date\") {\n                let isSelected = (0, _dateFns.isSameDay)(this.props.day, this.props.date);\n                return isSelected ? /*#__PURE__*/ _react.default.createElement(\"span\", {\n                    className: styles.selected,\n                    style: {\n                        color: this.props.color\n                    }\n                }) : null;\n            }\n            const inRanges = ranges.reduce((result, range)=>{\n                let startDate = range.startDate;\n                let endDate = range.endDate;\n                if (startDate && endDate && (0, _dateFns.isBefore)(endDate, startDate)) {\n                    [startDate, endDate] = [\n                        endDate,\n                        startDate\n                    ];\n                }\n                startDate = startDate ? (0, _dateFns.endOfDay)(startDate) : null;\n                endDate = endDate ? (0, _dateFns.startOfDay)(endDate) : null;\n                const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));\n                const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);\n                const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);\n                if (isInRange || isStartEdge || isEndEdge) {\n                    return [\n                        ...result,\n                        {\n                            isStartEdge,\n                            isEndEdge: isEndEdge,\n                            isInRange,\n                            ...range\n                        }\n                    ];\n                }\n                return result;\n            }, []);\n            return inRanges.map((range, i)=>/*#__PURE__*/ _react.default.createElement(\"span\", {\n                    key: i,\n                    className: (0, _classnames.default)({\n                        [styles.startEdge]: range.isStartEdge,\n                        [styles.endEdge]: range.isEndEdge,\n                        [styles.inRange]: range.isInRange\n                    }),\n                    style: {\n                        color: range.color || this.props.color\n                    }\n                }));\n        });\n        this.state = {\n            hover: false,\n            active: false\n        };\n    }\n    render() {\n        const { dayContentRenderer } = this.props;\n        return /*#__PURE__*/ _react.default.createElement(\"button\", _extends({\n            type: \"button\",\n            onMouseEnter: this.handleMouseEvent,\n            onMouseLeave: this.handleMouseEvent,\n            onFocus: this.handleMouseEvent,\n            onMouseDown: this.handleMouseEvent,\n            onMouseUp: this.handleMouseEvent,\n            onBlur: this.handleMouseEvent,\n            onPauseCapture: this.handleMouseEvent,\n            onKeyDown: this.handleKeyEvent,\n            onKeyUp: this.handleKeyEvent,\n            className: this.getClassNames(this.props.styles)\n        }, this.props.disabled || this.props.isPassive ? {\n            tabIndex: -1\n        } : {}, {\n            style: {\n                color: this.props.color\n            }\n        }), this.renderSelectionPlaceholders(), this.renderPreviewPlaceholder(), /*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: this.props.styles.dayNumber\n        }, dayContentRenderer?.(this.props.day) || /*#__PURE__*/ _react.default.createElement(\"span\", null, (0, _dateFns.format)(this.props.day, this.props.dayDisplayFormat))));\n    }\n}\nDayCell.defaultProps = {};\nconst rangeShape = exports.rangeShape = _propTypes.default.shape({\n    startDate: _propTypes.default.object,\n    endDate: _propTypes.default.object,\n    color: _propTypes.default.string,\n    key: _propTypes.default.string,\n    autoFocus: _propTypes.default.bool,\n    disabled: _propTypes.default.bool,\n    showDateDisplay: _propTypes.default.bool\n});\nDayCell.propTypes = {\n    day: _propTypes.default.object.isRequired,\n    dayDisplayFormat: _propTypes.default.string,\n    date: _propTypes.default.object,\n    ranges: _propTypes.default.arrayOf(rangeShape),\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object,\n        color: _propTypes.default.string\n    }),\n    onPreviewChange: _propTypes.default.func,\n    previewColor: _propTypes.default.string,\n    disabled: _propTypes.default.bool,\n    isPassive: _propTypes.default.bool,\n    isToday: _propTypes.default.bool,\n    isWeekend: _propTypes.default.bool,\n    isStartOfWeek: _propTypes.default.bool,\n    isEndOfWeek: _propTypes.default.bool,\n    isStartOfMonth: _propTypes.default.bool,\n    isEndOfMonth: _propTypes.default.bool,\n    color: _propTypes.default.string,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    styles: _propTypes.default.object,\n    onMouseDown: _propTypes.default.func,\n    onMouseUp: _propTypes.default.func,\n    onMouseEnter: _propTypes.default.func,\n    dayContentRenderer: _propTypes.default.func\n};\nvar _default = exports[\"default\"] = DayCell;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/DefinedRange/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _styles = _interopRequireDefault(__webpack_require__(/*! ../../styles */ \"(ssr)/./node_modules/react-date-range/dist/styles.js\"));\nvar _defaultRanges = __webpack_require__(/*! ../../defaultRanges */ \"(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\");\nvar _DayCell = __webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\");\nvar _InputRangeField = _interopRequireDefault(__webpack_require__(/*! ../InputRangeField */ \"(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nclass DefinedRange extends _react.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"handleRangeChange\", (range)=>{\n            const { onChange, ranges, focusedRange } = this.props;\n            const selectedRange = ranges[focusedRange[0]];\n            if (!onChange || !selectedRange) return;\n            onChange({\n                [selectedRange.key || `range${focusedRange[0] + 1}`]: {\n                    ...selectedRange,\n                    ...range\n                }\n            });\n        });\n        this.state = {\n            rangeOffset: 0,\n            focusedInput: -1\n        };\n    }\n    getRangeOptionValue(option) {\n        const { ranges = [], focusedRange = [] } = this.props;\n        if (typeof option.getCurrentValue !== \"function\") {\n            return \"\";\n        }\n        const selectedRange = ranges[focusedRange[0]] || {};\n        return option.getCurrentValue(selectedRange) || \"\";\n    }\n    getSelectedRange(ranges, staticRange) {\n        const focusedRangeIndex = ranges.findIndex((range)=>{\n            if (!range.startDate || !range.endDate || range.disabled) return false;\n            return staticRange.isSelected(range);\n        });\n        const selectedRange = ranges[focusedRangeIndex];\n        return {\n            selectedRange,\n            focusedRangeIndex\n        };\n    }\n    render() {\n        const { headerContent, footerContent, onPreviewChange, inputRanges, staticRanges, ranges, renderStaticRangeLabel, rangeColors, className } = this.props;\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: (0, _classnames.default)(_styles.default.definedRangesWrapper, className)\n        }, headerContent, /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: _styles.default.staticRanges\n        }, staticRanges.map((staticRange, i)=>{\n            const { selectedRange, focusedRangeIndex } = this.getSelectedRange(ranges, staticRange);\n            let labelContent;\n            if (staticRange.hasCustomRendering) {\n                labelContent = renderStaticRangeLabel(staticRange);\n            } else {\n                labelContent = staticRange.label;\n            }\n            return /*#__PURE__*/ _react.default.createElement(\"button\", {\n                type: \"button\",\n                className: (0, _classnames.default)(_styles.default.staticRange, {\n                    [_styles.default.staticRangeSelected]: Boolean(selectedRange)\n                }),\n                style: {\n                    color: selectedRange ? selectedRange.color || rangeColors[focusedRangeIndex] : null\n                },\n                key: i,\n                onClick: ()=>this.handleRangeChange(staticRange.range(this.props)),\n                onFocus: ()=>onPreviewChange && onPreviewChange(staticRange.range(this.props)),\n                onMouseOver: ()=>onPreviewChange && onPreviewChange(staticRange.range(this.props)),\n                onMouseLeave: ()=>{\n                    onPreviewChange && onPreviewChange();\n                }\n            }, /*#__PURE__*/ _react.default.createElement(\"span\", {\n                tabIndex: -1,\n                className: _styles.default.staticRangeLabel\n            }, labelContent));\n        })), /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: _styles.default.inputRanges\n        }, inputRanges.map((rangeOption, i)=>/*#__PURE__*/ _react.default.createElement(_InputRangeField.default, {\n                key: i,\n                styles: _styles.default,\n                label: rangeOption.label,\n                onFocus: ()=>this.setState({\n                        focusedInput: i,\n                        rangeOffset: 0\n                    }),\n                onBlur: ()=>this.setState({\n                        rangeOffset: 0\n                    }),\n                onChange: (value)=>this.handleRangeChange(rangeOption.range(value, this.props)),\n                value: this.getRangeOptionValue(rangeOption)\n            }))), footerContent);\n    }\n}\nDefinedRange.propTypes = {\n    inputRanges: _propTypes.default.array,\n    staticRanges: _propTypes.default.array,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    onPreviewChange: _propTypes.default.func,\n    onChange: _propTypes.default.func,\n    footerContent: _propTypes.default.any,\n    headerContent: _propTypes.default.any,\n    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),\n    className: _propTypes.default.string,\n    renderStaticRangeLabel: _propTypes.default.func\n};\nDefinedRange.defaultProps = {\n    inputRanges: _defaultRanges.defaultInputRanges,\n    staticRanges: _defaultRanges.defaultStaticRanges,\n    ranges: [],\n    rangeColors: [\n        \"#3d91ff\",\n        \"#3ecf8e\",\n        \"#fed14c\"\n    ],\n    focusedRange: [\n        0,\n        0\n    ]\n};\nvar _default = exports[\"default\"] = DefinedRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2NvbXBvbmVudHMvRGVmaW5lZFJhbmdlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsU0FBU0Msd0JBQXdCQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUNwRCxJQUFJQyxhQUFhQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDREQUFZO0FBQzVELElBQUlHLFVBQVVELHVCQUF1QkYsbUJBQU9BLENBQUMsMEVBQWM7QUFDM0QsSUFBSUksaUJBQWlCSixtQkFBT0EsQ0FBQyx3RkFBcUI7QUFDbEQsSUFBSUssV0FBV0wsbUJBQU9BLENBQUMsMEZBQVk7QUFDbkMsSUFBSU0sbUJBQW1CSix1QkFBdUJGLG1CQUFPQSxDQUFDLDBHQUFvQjtBQUMxRSxJQUFJTyxjQUFjTCx1QkFBdUJGLG1CQUFPQSxDQUFDLDREQUFZO0FBQzdELFNBQVNFLHVCQUF1Qk0sR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFWCxTQUFTVztJQUFJO0FBQUc7QUFDOUYsU0FBU0UseUJBQXlCQyxDQUFDO0lBQUksSUFBSSxjQUFjLE9BQU9DLFNBQVMsT0FBTztJQUFNLElBQUlDLElBQUksSUFBSUQsV0FBV0UsSUFBSSxJQUFJRjtJQUFXLE9BQU8sQ0FBQ0YsMkJBQTJCLFNBQVVDLENBQUM7UUFBSSxPQUFPQSxJQUFJRyxJQUFJRDtJQUFHLEdBQUdGO0FBQUk7QUFDM00sU0FBU1osd0JBQXdCWSxDQUFDLEVBQUVFLENBQUM7SUFBSSxJQUFJLENBQUNBLEtBQUtGLEtBQUtBLEVBQUVGLFVBQVUsRUFBRSxPQUFPRTtJQUFHLElBQUksU0FBU0EsS0FBSyxZQUFZLE9BQU9BLEtBQUssY0FBYyxPQUFPQSxHQUFHLE9BQU87UUFBRWQsU0FBU2M7SUFBRTtJQUFHLElBQUlH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RyxJQUFJO0FBQ2pEO0FBQ0EzRCxhQUFhOEQsWUFBWSxHQUFHO0lBQzFCbkMsYUFBYTlELGVBQWVrRyxrQkFBa0I7SUFDOUNuQyxjQUFjL0QsZUFBZW1HLG1CQUFtQjtJQUNoRDFELFFBQVEsRUFBRTtJQUNWd0IsYUFBYTtRQUFDO1FBQVc7UUFBVztLQUFVO0lBQzlDdkIsY0FBYztRQUFDO1FBQUc7S0FBRTtBQUN0QjtBQUNBLElBQUkwRCxXQUFXN0csa0JBQWUsR0FBRzRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGphbmdvYm5iLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGUtcmFuZ2UvZGlzdC9jb21wb25lbnRzL0RlZmluZWRSYW5nZS9pbmRleC5qcz84NTRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9zdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9zdHlsZXNcIikpO1xudmFyIF9kZWZhdWx0UmFuZ2VzID0gcmVxdWlyZShcIi4uLy4uL2RlZmF1bHRSYW5nZXNcIik7XG52YXIgX0RheUNlbGwgPSByZXF1aXJlKFwiLi4vRGF5Q2VsbFwiKTtcbnZhciBfSW5wdXRSYW5nZUZpZWxkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRSYW5nZUZpZWxkXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIGUgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHUpKSB7IHZhciBpID0gYSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdSkgOiBudWxsOyBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgdSwgaSkgOiBuW3VdID0gZVt1XTsgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IHR5cGVvZiBpID8gaSA6IFN0cmluZyhpKTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuY2xhc3MgRGVmaW5lZFJhbmdlIGV4dGVuZHMgX3JlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhbmRsZVJhbmdlQ2hhbmdlXCIsIHJhbmdlID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICAgIHJhbmdlcyxcbiAgICAgICAgZm9jdXNlZFJhbmdlXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSByYW5nZXNbZm9jdXNlZFJhbmdlWzBdXTtcbiAgICAgIGlmICghb25DaGFuZ2UgfHwgIXNlbGVjdGVkUmFuZ2UpIHJldHVybjtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgW3NlbGVjdGVkUmFuZ2Uua2V5IHx8IGByYW5nZSR7Zm9jdXNlZFJhbmdlWzBdICsgMX1gXToge1xuICAgICAgICAgIC4uLnNlbGVjdGVkUmFuZ2UsXG4gICAgICAgICAgLi4ucmFuZ2VcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHJhbmdlT2Zmc2V0OiAwLFxuICAgICAgZm9jdXNlZElucHV0OiAtMVxuICAgIH07XG4gIH1cbiAgZ2V0UmFuZ2VPcHRpb25WYWx1ZShvcHRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICByYW5nZXMgPSBbXSxcbiAgICAgIGZvY3VzZWRSYW5nZSA9IFtdXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHR5cGVvZiBvcHRpb24uZ2V0Q3VycmVudFZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGVkUmFuZ2UgPSByYW5nZXNbZm9jdXNlZFJhbmdlWzBdXSB8fCB7fTtcbiAgICByZXR1cm4gb3B0aW9uLmdldEN1cnJlbnRWYWx1ZShzZWxlY3RlZFJhbmdlKSB8fCAnJztcbiAgfVxuICBnZXRTZWxlY3RlZFJhbmdlKHJhbmdlcywgc3RhdGljUmFuZ2UpIHtcbiAgICBjb25zdCBmb2N1c2VkUmFuZ2VJbmRleCA9IHJhbmdlcy5maW5kSW5kZXgocmFuZ2UgPT4ge1xuICAgICAgaWYgKCFyYW5nZS5zdGFydERhdGUgfHwgIXJhbmdlLmVuZERhdGUgfHwgcmFuZ2UuZGlzYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBzdGF0aWNSYW5nZS5pc1NlbGVjdGVkKHJhbmdlKTtcbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3RlZFJhbmdlID0gcmFuZ2VzW2ZvY3VzZWRSYW5nZUluZGV4XTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0ZWRSYW5nZSxcbiAgICAgIGZvY3VzZWRSYW5nZUluZGV4XG4gICAgfTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVhZGVyQ29udGVudCxcbiAgICAgIGZvb3RlckNvbnRlbnQsXG4gICAgICBvblByZXZpZXdDaGFuZ2UsXG4gICAgICBpbnB1dFJhbmdlcyxcbiAgICAgIHN0YXRpY1JhbmdlcyxcbiAgICAgIHJhbmdlcyxcbiAgICAgIHJlbmRlclN0YXRpY1JhbmdlTGFiZWwsXG4gICAgICByYW5nZUNvbG9ycyxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShfc3R5bGVzLmRlZmF1bHQuZGVmaW5lZFJhbmdlc1dyYXBwZXIsIGNsYXNzTmFtZSlcbiAgICB9LCBoZWFkZXJDb250ZW50LCAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IF9zdHlsZXMuZGVmYXVsdC5zdGF0aWNSYW5nZXNcbiAgICB9LCBzdGF0aWNSYW5nZXMubWFwKChzdGF0aWNSYW5nZSwgaSkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBzZWxlY3RlZFJhbmdlLFxuICAgICAgICBmb2N1c2VkUmFuZ2VJbmRleFxuICAgICAgfSA9IHRoaXMuZ2V0U2VsZWN0ZWRSYW5nZShyYW5nZXMsIHN0YXRpY1JhbmdlKTtcbiAgICAgIGxldCBsYWJlbENvbnRlbnQ7XG4gICAgICBpZiAoc3RhdGljUmFuZ2UuaGFzQ3VzdG9tUmVuZGVyaW5nKSB7XG4gICAgICAgIGxhYmVsQ29udGVudCA9IHJlbmRlclN0YXRpY1JhbmdlTGFiZWwoc3RhdGljUmFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWxDb250ZW50ID0gc3RhdGljUmFuZ2UubGFiZWw7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShfc3R5bGVzLmRlZmF1bHQuc3RhdGljUmFuZ2UsIHtcbiAgICAgICAgICBbX3N0eWxlcy5kZWZhdWx0LnN0YXRpY1JhbmdlU2VsZWN0ZWRdOiBCb29sZWFuKHNlbGVjdGVkUmFuZ2UpXG4gICAgICAgIH0pLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yOiBzZWxlY3RlZFJhbmdlID8gc2VsZWN0ZWRSYW5nZS5jb2xvciB8fCByYW5nZUNvbG9yc1tmb2N1c2VkUmFuZ2VJbmRleF0gOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGtleTogaSxcbiAgICAgICAgb25DbGljazogKCkgPT4gdGhpcy5oYW5kbGVSYW5nZUNoYW5nZShzdGF0aWNSYW5nZS5yYW5nZSh0aGlzLnByb3BzKSksXG4gICAgICAgIG9uRm9jdXM6ICgpID0+IG9uUHJldmlld0NoYW5nZSAmJiBvblByZXZpZXdDaGFuZ2Uoc3RhdGljUmFuZ2UucmFuZ2UodGhpcy5wcm9wcykpLFxuICAgICAgICBvbk1vdXNlT3ZlcjogKCkgPT4gb25QcmV2aWV3Q2hhbmdlICYmIG9uUHJldmlld0NoYW5nZShzdGF0aWNSYW5nZS5yYW5nZSh0aGlzLnByb3BzKSksXG4gICAgICAgIG9uTW91c2VMZWF2ZTogKCkgPT4ge1xuICAgICAgICAgIG9uUHJldmlld0NoYW5nZSAmJiBvblByZXZpZXdDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgfSwgLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICBjbGFzc05hbWU6IF9zdHlsZXMuZGVmYXVsdC5zdGF0aWNSYW5nZUxhYmVsXG4gICAgICB9LCBsYWJlbENvbnRlbnQpKTtcbiAgICB9KSksIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogX3N0eWxlcy5kZWZhdWx0LmlucHV0UmFuZ2VzXG4gICAgfSwgaW5wdXRSYW5nZXMubWFwKChyYW5nZU9wdGlvbiwgaSkgPT4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0lucHV0UmFuZ2VGaWVsZC5kZWZhdWx0LCB7XG4gICAgICBrZXk6IGksXG4gICAgICBzdHlsZXM6IF9zdHlsZXMuZGVmYXVsdCxcbiAgICAgIGxhYmVsOiByYW5nZU9wdGlvbi5sYWJlbCxcbiAgICAgIG9uRm9jdXM6ICgpID0+IHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkSW5wdXQ6IGksXG4gICAgICAgIHJhbmdlT2Zmc2V0OiAwXG4gICAgICB9KSxcbiAgICAgIG9uQmx1cjogKCkgPT4gdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHJhbmdlT2Zmc2V0OiAwXG4gICAgICB9KSxcbiAgICAgIG9uQ2hhbmdlOiB2YWx1ZSA9PiB0aGlzLmhhbmRsZVJhbmdlQ2hhbmdlKHJhbmdlT3B0aW9uLnJhbmdlKHZhbHVlLCB0aGlzLnByb3BzKSksXG4gICAgICB2YWx1ZTogdGhpcy5nZXRSYW5nZU9wdGlvblZhbHVlKHJhbmdlT3B0aW9uKVxuICAgIH0pKSksIGZvb3RlckNvbnRlbnQpO1xuICB9XG59XG5EZWZpbmVkUmFuZ2UucHJvcFR5cGVzID0ge1xuICBpbnB1dFJhbmdlczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5LFxuICBzdGF0aWNSYW5nZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheSxcbiAgcmFuZ2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfRGF5Q2VsbC5yYW5nZVNoYXBlKSxcbiAgZm9jdXNlZFJhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyKSxcbiAgb25QcmV2aWV3Q2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICBmb290ZXJDb250ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuICBoZWFkZXJDb250ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55LFxuICByYW5nZUNvbG9yczogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyksXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgcmVuZGVyU3RhdGljUmFuZ2VMYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG5EZWZpbmVkUmFuZ2UuZGVmYXVsdFByb3BzID0ge1xuICBpbnB1dFJhbmdlczogX2RlZmF1bHRSYW5nZXMuZGVmYXVsdElucHV0UmFuZ2VzLFxuICBzdGF0aWNSYW5nZXM6IF9kZWZhdWx0UmFuZ2VzLmRlZmF1bHRTdGF0aWNSYW5nZXMsXG4gIHJhbmdlczogW10sXG4gIHJhbmdlQ29sb3JzOiBbJyMzZDkxZmYnLCAnIzNlY2Y4ZScsICcjZmVkMTRjJ10sXG4gIGZvY3VzZWRSYW5nZTogWzAsIDBdXG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gRGVmaW5lZFJhbmdlOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zdHlsZXMiLCJfZGVmYXVsdFJhbmdlcyIsIl9EYXlDZWxsIiwiX0lucHV0UmFuZ2VGaWVsZCIsIl9jbGFzc25hbWVzIiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwiX3RvUHJvcGVydHlLZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIk51bWJlciIsIkRlZmluZWRSYW5nZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJyYW5nZSIsIm9uQ2hhbmdlIiwicmFuZ2VzIiwiZm9jdXNlZFJhbmdlIiwic2VsZWN0ZWRSYW5nZSIsInN0YXRlIiwicmFuZ2VPZmZzZXQiLCJmb2N1c2VkSW5wdXQiLCJnZXRSYW5nZU9wdGlvblZhbHVlIiwib3B0aW9uIiwiZ2V0Q3VycmVudFZhbHVlIiwiZ2V0U2VsZWN0ZWRSYW5nZSIsInN0YXRpY1JhbmdlIiwiZm9jdXNlZFJhbmdlSW5kZXgiLCJmaW5kSW5kZXgiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiZGlzYWJsZWQiLCJpc1NlbGVjdGVkIiwicmVuZGVyIiwiaGVhZGVyQ29udGVudCIsImZvb3RlckNvbnRlbnQiLCJvblByZXZpZXdDaGFuZ2UiLCJpbnB1dFJhbmdlcyIsInN0YXRpY1JhbmdlcyIsInJlbmRlclN0YXRpY1JhbmdlTGFiZWwiLCJyYW5nZUNvbG9ycyIsImNsYXNzTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJkZWZpbmVkUmFuZ2VzV3JhcHBlciIsIm1hcCIsImxhYmVsQ29udGVudCIsImhhc0N1c3RvbVJlbmRlcmluZyIsImxhYmVsIiwidHlwZSIsInN0YXRpY1JhbmdlU2VsZWN0ZWQiLCJCb29sZWFuIiwic3R5bGUiLCJjb2xvciIsIm9uQ2xpY2siLCJoYW5kbGVSYW5nZUNoYW5nZSIsIm9uRm9jdXMiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VMZWF2ZSIsInRhYkluZGV4Iiwic3RhdGljUmFuZ2VMYWJlbCIsInJhbmdlT3B0aW9uIiwic3R5bGVzIiwic2V0U3RhdGUiLCJvbkJsdXIiLCJwcm9wVHlwZXMiLCJhcnJheSIsImFycmF5T2YiLCJyYW5nZVNoYXBlIiwibnVtYmVyIiwiZnVuYyIsImFueSIsInN0cmluZyIsImRlZmF1bHRQcm9wcyIsImRlZmF1bHRJbnB1dFJhbmdlcyIsImRlZmF1bHRTdGF0aWNSYW5nZXMiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/InputRangeField/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nconst MIN = 0;\nconst MAX = 99999;\nclass InputRangeField extends _react.Component {\n    constructor(props, context){\n        super(props, context);\n        _defineProperty(this, \"onChange\", (e)=>{\n            const { onChange } = this.props;\n            let value = parseInt(e.target.value, 10);\n            value = isNaN(value) ? 0 : Math.max(Math.min(MAX, value), MIN);\n            onChange(value);\n        });\n    }\n    shouldComponentUpdate(nextProps) {\n        const { value, label, placeholder } = this.props;\n        return value !== nextProps.value || label !== nextProps.label || placeholder !== nextProps.placeholder;\n    }\n    render() {\n        const { label, placeholder, value, styles, onBlur, onFocus } = this.props;\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: styles.inputRange\n        }, /*#__PURE__*/ _react.default.createElement(\"input\", {\n            className: styles.inputRangeInput,\n            placeholder: placeholder,\n            value: value,\n            min: MIN,\n            max: MAX,\n            onChange: this.onChange,\n            onFocus: onFocus,\n            onBlur: onBlur\n        }), /*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: styles.inputRangeLabel\n        }, label));\n    }\n}\nInputRangeField.propTypes = {\n    value: _propTypes.default.oneOfType([\n        _propTypes.default.string,\n        _propTypes.default.number\n    ]),\n    label: _propTypes.default.oneOfType([\n        _propTypes.default.element,\n        _propTypes.default.node\n    ]).isRequired,\n    placeholder: _propTypes.default.string,\n    styles: _propTypes.default.shape({\n        inputRange: _propTypes.default.string,\n        inputRangeInput: _propTypes.default.string,\n        inputRangeLabel: _propTypes.default.string\n    }).isRequired,\n    onBlur: _propTypes.default.func.isRequired,\n    onFocus: _propTypes.default.func.isRequired,\n    onChange: _propTypes.default.func.isRequired\n};\nInputRangeField.defaultProps = {\n    value: \"\",\n    placeholder: \"-\"\n};\nvar _default = exports[\"default\"] = InputRangeField;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/InputRangeField/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/components/Month/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-date-range/dist/components/Month/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nvar _DayCell = _interopRequireWildcard(__webpack_require__(/*! ../DayCell */ \"(ssr)/./node_modules/react-date-range/dist/components/DayCell/index.js\"));\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"(ssr)/./node_modules/react-date-range/dist/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) return null;\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n        return e ? t : r;\n    })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) return e;\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n        default: e\n    };\n    var t = _getRequireWildcardCache(r);\n    if (t && t.has(e)) return t.get(e);\n    var n = {\n        __proto__: null\n    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var u in e)if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n    }\n    return n.default = e, t && t.set(e, n), n;\n}\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n} /* eslint-disable no-fallthrough */ \nfunction renderWeekdays(styles, dateOptions, weekdayDisplayFormat) {\n    const now = new Date();\n    return /*#__PURE__*/ _react.default.createElement(\"div\", {\n        className: styles.weekDays\n    }, (0, _dateFns.eachDayOfInterval)({\n        start: (0, _dateFns.startOfWeek)(now, dateOptions),\n        end: (0, _dateFns.endOfWeek)(now, dateOptions)\n    }).map((day, i)=>/*#__PURE__*/ _react.default.createElement(\"span\", {\n            className: styles.weekDay,\n            key: i\n        }, (0, _dateFns.format)(day, weekdayDisplayFormat, dateOptions))));\n}\nclass Month extends _react.PureComponent {\n    render() {\n        const now = new Date();\n        const { displayMode, focusedRange, drag, styles, disabledDates, disabledDay } = this.props;\n        const minDate = this.props.minDate && (0, _dateFns.startOfDay)(this.props.minDate);\n        const maxDate = this.props.maxDate && (0, _dateFns.endOfDay)(this.props.maxDate);\n        const monthDisplay = (0, _utils.getMonthDisplayRange)(this.props.month, this.props.dateOptions, this.props.fixedHeight);\n        let ranges = this.props.ranges;\n        if (displayMode === \"dateRange\" && drag.status) {\n            let { startDate, endDate } = drag.range;\n            ranges = ranges.map((range, i)=>{\n                if (i !== focusedRange[0]) return range;\n                return {\n                    ...range,\n                    startDate,\n                    endDate\n                };\n            });\n        }\n        const showPreview = this.props.showPreview && !drag.disablePreview;\n        return /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: styles.month,\n            style: this.props.style\n        }, this.props.showMonthName ? /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: styles.monthName\n        }, (0, _dateFns.format)(this.props.month, this.props.monthDisplayFormat, this.props.dateOptions)) : null, this.props.showWeekDays && renderWeekdays(styles, this.props.dateOptions, this.props.weekdayDisplayFormat), /*#__PURE__*/ _react.default.createElement(\"div\", {\n            className: styles.days,\n            onMouseLeave: this.props.onMouseLeave\n        }, (0, _dateFns.eachDayOfInterval)({\n            start: monthDisplay.start,\n            end: monthDisplay.end\n        }).map((day, index)=>{\n            const isStartOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.startDateOfMonth);\n            const isEndOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.endDateOfMonth);\n            const isOutsideMinMax = minDate && (0, _dateFns.isBefore)(day, minDate) || maxDate && (0, _dateFns.isAfter)(day, maxDate);\n            const isDisabledSpecifically = disabledDates.some((disabledDate)=>(0, _dateFns.isSameDay)(disabledDate, day));\n            const isDisabledDay = disabledDay(day);\n            return /*#__PURE__*/ _react.default.createElement(_DayCell.default, _extends({}, this.props, {\n                ranges: ranges,\n                day: day,\n                preview: showPreview ? this.props.preview : null,\n                isWeekend: (0, _dateFns.isWeekend)(day, this.props.dateOptions),\n                isToday: (0, _dateFns.isSameDay)(day, now),\n                isStartOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.startOfWeek)(day, this.props.dateOptions)),\n                isEndOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.endOfWeek)(day, this.props.dateOptions)),\n                isStartOfMonth: isStartOfMonth,\n                isEndOfMonth: isEndOfMonth,\n                key: index,\n                disabled: isOutsideMinMax || isDisabledSpecifically || isDisabledDay,\n                isPassive: !(0, _dateFns.isWithinInterval)(day, {\n                    start: monthDisplay.startDateOfMonth,\n                    end: monthDisplay.endDateOfMonth\n                }),\n                styles: styles,\n                onMouseDown: this.props.onDragSelectionStart,\n                onMouseUp: this.props.onDragSelectionEnd,\n                onMouseEnter: this.props.onDragSelectionMove,\n                dragRange: drag.range,\n                drag: drag.status\n            }));\n        })));\n    }\n}\nMonth.defaultProps = {};\nMonth.propTypes = {\n    style: _propTypes.default.object,\n    styles: _propTypes.default.object,\n    month: _propTypes.default.object,\n    drag: _propTypes.default.object,\n    dateOptions: _propTypes.default.object,\n    disabledDates: _propTypes.default.array,\n    disabledDay: _propTypes.default.func,\n    preview: _propTypes.default.shape({\n        startDate: _propTypes.default.object,\n        endDate: _propTypes.default.object\n    }),\n    showPreview: _propTypes.default.bool,\n    displayMode: _propTypes.default.oneOf([\n        \"dateRange\",\n        \"date\"\n    ]),\n    minDate: _propTypes.default.object,\n    maxDate: _propTypes.default.object,\n    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),\n    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),\n    onDragSelectionStart: _propTypes.default.func,\n    onDragSelectionEnd: _propTypes.default.func,\n    onDragSelectionMove: _propTypes.default.func,\n    onMouseLeave: _propTypes.default.func,\n    monthDisplayFormat: _propTypes.default.string,\n    weekdayDisplayFormat: _propTypes.default.string,\n    dayDisplayFormat: _propTypes.default.string,\n    showWeekDays: _propTypes.default.bool,\n    showMonthName: _propTypes.default.bool,\n    fixedHeight: _propTypes.default.bool\n};\nvar _default = exports[\"default\"] = Month;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/components/Month/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/defaultRanges.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-date-range/dist/defaultRanges.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createStaticRanges = createStaticRanges;\nexports.defaultStaticRanges = exports.defaultInputRanges = void 0;\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nconst defineds = {\n    startOfWeek: (0, _dateFns.startOfWeek)(new Date()),\n    endOfWeek: (0, _dateFns.endOfWeek)(new Date()),\n    startOfLastWeek: (0, _dateFns.startOfWeek)((0, _dateFns.addDays)(new Date(), -7)),\n    endOfLastWeek: (0, _dateFns.endOfWeek)((0, _dateFns.addDays)(new Date(), -7)),\n    startOfToday: (0, _dateFns.startOfDay)(new Date()),\n    endOfToday: (0, _dateFns.endOfDay)(new Date()),\n    startOfYesterday: (0, _dateFns.startOfDay)((0, _dateFns.addDays)(new Date(), -1)),\n    endOfYesterday: (0, _dateFns.endOfDay)((0, _dateFns.addDays)(new Date(), -1)),\n    startOfMonth: (0, _dateFns.startOfMonth)(new Date()),\n    endOfMonth: (0, _dateFns.endOfMonth)(new Date()),\n    startOfLastMonth: (0, _dateFns.startOfMonth)((0, _dateFns.addMonths)(new Date(), -1)),\n    endOfLastMonth: (0, _dateFns.endOfMonth)((0, _dateFns.addMonths)(new Date(), -1))\n};\nconst staticRangeHandler = {\n    range: {},\n    isSelected (range) {\n        const definedRange = this.range();\n        return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);\n    }\n};\nfunction createStaticRanges(ranges) {\n    return ranges.map((range)=>({\n            ...staticRangeHandler,\n            ...range\n        }));\n}\nconst defaultStaticRanges = exports.defaultStaticRanges = createStaticRanges([\n    {\n        label: \"Today\",\n        range: ()=>({\n                startDate: defineds.startOfToday,\n                endDate: defineds.endOfToday\n            })\n    },\n    {\n        label: \"Yesterday\",\n        range: ()=>({\n                startDate: defineds.startOfYesterday,\n                endDate: defineds.endOfYesterday\n            })\n    },\n    {\n        label: \"This Week\",\n        range: ()=>({\n                startDate: defineds.startOfWeek,\n                endDate: defineds.endOfWeek\n            })\n    },\n    {\n        label: \"Last Week\",\n        range: ()=>({\n                startDate: defineds.startOfLastWeek,\n                endDate: defineds.endOfLastWeek\n            })\n    },\n    {\n        label: \"This Month\",\n        range: ()=>({\n                startDate: defineds.startOfMonth,\n                endDate: defineds.endOfMonth\n            })\n    },\n    {\n        label: \"Last Month\",\n        range: ()=>({\n                startDate: defineds.startOfLastMonth,\n                endDate: defineds.endOfLastMonth\n            })\n    }\n]);\nconst defaultInputRanges = exports.defaultInputRanges = [\n    {\n        label: \"days up to today\",\n        range (value) {\n            return {\n                startDate: (0, _dateFns.addDays)(defineds.startOfToday, (Math.max(Number(value), 1) - 1) * -1),\n                endDate: defineds.endOfToday\n            };\n        },\n        getCurrentValue (range) {\n            if (!(0, _dateFns.isSameDay)(range.endDate, defineds.endOfToday)) return \"-\";\n            if (!range.startDate) return \"∞\";\n            return (0, _dateFns.differenceInCalendarDays)(defineds.endOfToday, range.startDate) + 1;\n        }\n    },\n    {\n        label: \"days starting today\",\n        range (value) {\n            const today = new Date();\n            return {\n                startDate: today,\n                endDate: (0, _dateFns.addDays)(today, Math.max(Number(value), 1) - 1)\n            };\n        },\n        getCurrentValue (range) {\n            if (!(0, _dateFns.isSameDay)(range.startDate, defineds.startOfToday)) return \"-\";\n            if (!range.endDate) return \"∞\";\n            return (0, _dateFns.differenceInCalendarDays)(range.endDate, defineds.startOfToday) + 1;\n        }\n    }\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-date-range/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Calendar\", ({\n    enumerable: true,\n    get: function() {\n        return _Calendar.default;\n    }\n}));\nObject.defineProperty(exports, \"DateRange\", ({\n    enumerable: true,\n    get: function() {\n        return _DateRange.default;\n    }\n}));\nObject.defineProperty(exports, \"DateRangePicker\", ({\n    enumerable: true,\n    get: function() {\n        return _DateRangePicker.default;\n    }\n}));\nObject.defineProperty(exports, \"DefinedRange\", ({\n    enumerable: true,\n    get: function() {\n        return _DefinedRange.default;\n    }\n}));\nObject.defineProperty(exports, \"createStaticRanges\", ({\n    enumerable: true,\n    get: function() {\n        return _defaultRanges.createStaticRanges;\n    }\n}));\nObject.defineProperty(exports, \"defaultInputRanges\", ({\n    enumerable: true,\n    get: function() {\n        return _defaultRanges.defaultInputRanges;\n    }\n}));\nObject.defineProperty(exports, \"defaultStaticRanges\", ({\n    enumerable: true,\n    get: function() {\n        return _defaultRanges.defaultStaticRanges;\n    }\n}));\nvar _DateRange = _interopRequireDefault(__webpack_require__(/*! ./components/DateRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRange/index.js\"));\nvar _Calendar = _interopRequireDefault(__webpack_require__(/*! ./components/Calendar */ \"(ssr)/./node_modules/react-date-range/dist/components/Calendar/index.js\"));\nvar _DateRangePicker = _interopRequireDefault(__webpack_require__(/*! ./components/DateRangePicker */ \"(ssr)/./node_modules/react-date-range/dist/components/DateRangePicker/index.js\"));\nvar _DefinedRange = _interopRequireDefault(__webpack_require__(/*! ./components/DefinedRange */ \"(ssr)/./node_modules/react-date-range/dist/components/DefinedRange/index.js\"));\nvar _defaultRanges = __webpack_require__(/*! ./defaultRanges */ \"(ssr)/./node_modules/react-date-range/dist/defaultRanges.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCw0Q0FBMkM7SUFDekNJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9DLFVBQVVDLE9BQU87SUFDMUI7QUFDRixDQUFDLEVBQUM7QUFDRlAsNkNBQTRDO0lBQzFDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDSCxPQUFPRyxXQUFXRCxPQUFPO0lBQzNCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLG1EQUFrRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT0ksaUJBQWlCRixPQUFPO0lBQ2pDO0FBQ0YsQ0FBQyxFQUFDO0FBQ0ZQLGdEQUErQztJQUM3Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT0ssY0FBY0gsT0FBTztJQUM5QjtBQUNGLENBQUMsRUFBQztBQUNGUCxzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9NLGVBQWVDLGtCQUFrQjtJQUMxQztBQUNGLENBQUMsRUFBQztBQUNGWixzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9NLGVBQWVFLGtCQUFrQjtJQUMxQztBQUNGLENBQUMsRUFBQztBQUNGYix1REFBc0Q7SUFDcERJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9NLGVBQWVHLG1CQUFtQjtJQUMzQztBQUNGLENBQUMsRUFBQztBQUNGLElBQUlOLGFBQWFPLHVCQUF1QkMsbUJBQU9BLENBQUMsd0dBQXdCO0FBQ3hFLElBQUlWLFlBQVlTLHVCQUF1QkMsbUJBQU9BLENBQUMsc0dBQXVCO0FBQ3RFLElBQUlQLG1CQUFtQk0sdUJBQXVCQyxtQkFBT0EsQ0FBQyxvSEFBOEI7QUFDcEYsSUFBSU4sZ0JBQWdCSyx1QkFBdUJDLG1CQUFPQSxDQUFDLDhHQUEyQjtBQUM5RSxJQUFJTCxpQkFBaUJLLG1CQUFPQSxDQUFDLG9GQUFpQjtBQUM5QyxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRVYsU0FBU1U7SUFBSTtBQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGphbmdvYm5iLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGUtcmFuZ2UvZGlzdC9pbmRleC5qcz80ZTdkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsZW5kYXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0NhbGVuZGFyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0ZVJhbmdlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9EYXRlUmFuZ2UuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VQaWNrZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX0RhdGVSYW5nZVBpY2tlci5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlZmluZWRSYW5nZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfRGVmaW5lZFJhbmdlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlU3RhdGljUmFuZ2VzXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9kZWZhdWx0UmFuZ2VzLmNyZWF0ZVN0YXRpY1JhbmdlcztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0SW5wdXRSYW5nZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRSYW5nZXMuZGVmYXVsdElucHV0UmFuZ2VzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRTdGF0aWNSYW5nZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2RlZmF1bHRSYW5nZXMuZGVmYXVsdFN0YXRpY1JhbmdlcztcbiAgfVxufSk7XG52YXIgX0RhdGVSYW5nZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXRlUmFuZ2VcIikpO1xudmFyIF9DYWxlbmRhciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9DYWxlbmRhclwiKSk7XG52YXIgX0RhdGVSYW5nZVBpY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJcIikpO1xudmFyIF9EZWZpbmVkUmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGVmaW5lZFJhbmdlXCIpKTtcbnZhciBfZGVmYXVsdFJhbmdlcyA9IHJlcXVpcmUoXCIuL2RlZmF1bHRSYW5nZXNcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfQ2FsZW5kYXIiLCJkZWZhdWx0IiwiX0RhdGVSYW5nZSIsIl9EYXRlUmFuZ2VQaWNrZXIiLCJfRGVmaW5lZFJhbmdlIiwiX2RlZmF1bHRSYW5nZXMiLCJjcmVhdGVTdGF0aWNSYW5nZXMiLCJkZWZhdWx0SW5wdXRSYW5nZXMiLCJkZWZhdWx0U3RhdGljUmFuZ2VzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/styles.js":
/*!******************************************************!*\
  !*** ./node_modules/react-date-range/dist/styles.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = exports[\"default\"] = {\n    dateRangeWrapper: \"rdrDateRangeWrapper\",\n    calendarWrapper: \"rdrCalendarWrapper\",\n    dateDisplay: \"rdrDateDisplay\",\n    dateDisplayItem: \"rdrDateDisplayItem\",\n    dateDisplayItemActive: \"rdrDateDisplayItemActive\",\n    monthAndYearWrapper: \"rdrMonthAndYearWrapper\",\n    monthAndYearPickers: \"rdrMonthAndYearPickers\",\n    nextPrevButton: \"rdrNextPrevButton\",\n    month: \"rdrMonth\",\n    weekDays: \"rdrWeekDays\",\n    weekDay: \"rdrWeekDay\",\n    days: \"rdrDays\",\n    day: \"rdrDay\",\n    dayNumber: \"rdrDayNumber\",\n    dayPassive: \"rdrDayPassive\",\n    dayToday: \"rdrDayToday\",\n    dayStartOfWeek: \"rdrDayStartOfWeek\",\n    dayEndOfWeek: \"rdrDayEndOfWeek\",\n    daySelected: \"rdrDaySelected\",\n    dayDisabled: \"rdrDayDisabled\",\n    dayStartOfMonth: \"rdrDayStartOfMonth\",\n    dayEndOfMonth: \"rdrDayEndOfMonth\",\n    dayWeekend: \"rdrDayWeekend\",\n    dayStartPreview: \"rdrDayStartPreview\",\n    dayInPreview: \"rdrDayInPreview\",\n    dayEndPreview: \"rdrDayEndPreview\",\n    dayHovered: \"rdrDayHovered\",\n    dayActive: \"rdrDayActive\",\n    inRange: \"rdrInRange\",\n    endEdge: \"rdrEndEdge\",\n    startEdge: \"rdrStartEdge\",\n    prevButton: \"rdrPprevButton\",\n    nextButton: \"rdrNextButton\",\n    selected: \"rdrSelected\",\n    months: \"rdrMonths\",\n    monthPicker: \"rdrMonthPicker\",\n    yearPicker: \"rdrYearPicker\",\n    dateDisplayWrapper: \"rdrDateDisplayWrapper\",\n    definedRangesWrapper: \"rdrDefinedRangesWrapper\",\n    staticRanges: \"rdrStaticRanges\",\n    staticRange: \"rdrStaticRange\",\n    inputRanges: \"rdrInputRanges\",\n    inputRange: \"rdrInputRange\",\n    inputRangeInput: \"rdrInputRangeInput\",\n    dateRangePickerWrapper: \"rdrDateRangePickerWrapper\",\n    staticRangeLabel: \"rdrStaticRangeLabel\",\n    staticRangeSelected: \"rdrStaticRangeSelected\",\n    monthName: \"rdrMonthName\",\n    infiniteMonths: \"rdrInfiniteMonths\",\n    monthsVertical: \"rdrMonthsVertical\",\n    monthsHorizontal: \"rdrMonthsHorizontal\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3N0eWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBQ3ZCLElBQUlHLFdBQVdILGtCQUFlLEdBQUc7SUFDL0JJLGtCQUFrQjtJQUNsQkMsaUJBQWlCO0lBQ2pCQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQkMsdUJBQXVCO0lBQ3ZCQyxxQkFBcUI7SUFDckJDLHFCQUFxQjtJQUNyQkMsZ0JBQWdCO0lBQ2hCQyxPQUFPO0lBQ1BDLFVBQVU7SUFDVkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLEtBQUs7SUFDTEMsV0FBVztJQUNYQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsZ0JBQWdCO0lBQ2hCQyxjQUFjO0lBQ2RDLGFBQWE7SUFDYkMsYUFBYTtJQUNiQyxpQkFBaUI7SUFDakJDLGVBQWU7SUFDZkMsWUFBWTtJQUNaQyxpQkFBaUI7SUFDakJDLGNBQWM7SUFDZEMsZUFBZTtJQUNmQyxZQUFZO0lBQ1pDLFdBQVc7SUFDWEMsU0FBUztJQUNUQyxTQUFTO0lBQ1RDLFdBQVc7SUFDWEMsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsb0JBQW9CO0lBQ3BCQyxzQkFBc0I7SUFDdEJDLGNBQWM7SUFDZEMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLFlBQVk7SUFDWkMsaUJBQWlCO0lBQ2pCQyx3QkFBd0I7SUFDeEJDLGtCQUFrQjtJQUNsQkMscUJBQXFCO0lBQ3JCQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsZ0JBQWdCO0lBQ2hCQyxrQkFBa0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kamFuZ29ibmIvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3N0eWxlcy5qcz9mNDBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBkYXRlUmFuZ2VXcmFwcGVyOiAncmRyRGF0ZVJhbmdlV3JhcHBlcicsXG4gIGNhbGVuZGFyV3JhcHBlcjogJ3JkckNhbGVuZGFyV3JhcHBlcicsXG4gIGRhdGVEaXNwbGF5OiAncmRyRGF0ZURpc3BsYXknLFxuICBkYXRlRGlzcGxheUl0ZW06ICdyZHJEYXRlRGlzcGxheUl0ZW0nLFxuICBkYXRlRGlzcGxheUl0ZW1BY3RpdmU6ICdyZHJEYXRlRGlzcGxheUl0ZW1BY3RpdmUnLFxuICBtb250aEFuZFllYXJXcmFwcGVyOiAncmRyTW9udGhBbmRZZWFyV3JhcHBlcicsXG4gIG1vbnRoQW5kWWVhclBpY2tlcnM6ICdyZHJNb250aEFuZFllYXJQaWNrZXJzJyxcbiAgbmV4dFByZXZCdXR0b246ICdyZHJOZXh0UHJldkJ1dHRvbicsXG4gIG1vbnRoOiAncmRyTW9udGgnLFxuICB3ZWVrRGF5czogJ3JkcldlZWtEYXlzJyxcbiAgd2Vla0RheTogJ3JkcldlZWtEYXknLFxuICBkYXlzOiAncmRyRGF5cycsXG4gIGRheTogJ3JkckRheScsXG4gIGRheU51bWJlcjogJ3JkckRheU51bWJlcicsXG4gIGRheVBhc3NpdmU6ICdyZHJEYXlQYXNzaXZlJyxcbiAgZGF5VG9kYXk6ICdyZHJEYXlUb2RheScsXG4gIGRheVN0YXJ0T2ZXZWVrOiAncmRyRGF5U3RhcnRPZldlZWsnLFxuICBkYXlFbmRPZldlZWs6ICdyZHJEYXlFbmRPZldlZWsnLFxuICBkYXlTZWxlY3RlZDogJ3JkckRheVNlbGVjdGVkJyxcbiAgZGF5RGlzYWJsZWQ6ICdyZHJEYXlEaXNhYmxlZCcsXG4gIGRheVN0YXJ0T2ZNb250aDogJ3JkckRheVN0YXJ0T2ZNb250aCcsXG4gIGRheUVuZE9mTW9udGg6ICdyZHJEYXlFbmRPZk1vbnRoJyxcbiAgZGF5V2Vla2VuZDogJ3JkckRheVdlZWtlbmQnLFxuICBkYXlTdGFydFByZXZpZXc6ICdyZHJEYXlTdGFydFByZXZpZXcnLFxuICBkYXlJblByZXZpZXc6ICdyZHJEYXlJblByZXZpZXcnLFxuICBkYXlFbmRQcmV2aWV3OiAncmRyRGF5RW5kUHJldmlldycsXG4gIGRheUhvdmVyZWQ6ICdyZHJEYXlIb3ZlcmVkJyxcbiAgZGF5QWN0aXZlOiAncmRyRGF5QWN0aXZlJyxcbiAgaW5SYW5nZTogJ3JkckluUmFuZ2UnLFxuICBlbmRFZGdlOiAncmRyRW5kRWRnZScsXG4gIHN0YXJ0RWRnZTogJ3JkclN0YXJ0RWRnZScsXG4gIHByZXZCdXR0b246ICdyZHJQcHJldkJ1dHRvbicsXG4gIG5leHRCdXR0b246ICdyZHJOZXh0QnV0dG9uJyxcbiAgc2VsZWN0ZWQ6ICdyZHJTZWxlY3RlZCcsXG4gIG1vbnRoczogJ3Jkck1vbnRocycsXG4gIG1vbnRoUGlja2VyOiAncmRyTW9udGhQaWNrZXInLFxuICB5ZWFyUGlja2VyOiAncmRyWWVhclBpY2tlcicsXG4gIGRhdGVEaXNwbGF5V3JhcHBlcjogJ3JkckRhdGVEaXNwbGF5V3JhcHBlcicsXG4gIGRlZmluZWRSYW5nZXNXcmFwcGVyOiAncmRyRGVmaW5lZFJhbmdlc1dyYXBwZXInLFxuICBzdGF0aWNSYW5nZXM6ICdyZHJTdGF0aWNSYW5nZXMnLFxuICBzdGF0aWNSYW5nZTogJ3JkclN0YXRpY1JhbmdlJyxcbiAgaW5wdXRSYW5nZXM6ICdyZHJJbnB1dFJhbmdlcycsXG4gIGlucHV0UmFuZ2U6ICdyZHJJbnB1dFJhbmdlJyxcbiAgaW5wdXRSYW5nZUlucHV0OiAncmRySW5wdXRSYW5nZUlucHV0JyxcbiAgZGF0ZVJhbmdlUGlja2VyV3JhcHBlcjogJ3JkckRhdGVSYW5nZVBpY2tlcldyYXBwZXInLFxuICBzdGF0aWNSYW5nZUxhYmVsOiAncmRyU3RhdGljUmFuZ2VMYWJlbCcsXG4gIHN0YXRpY1JhbmdlU2VsZWN0ZWQ6ICdyZHJTdGF0aWNSYW5nZVNlbGVjdGVkJyxcbiAgbW9udGhOYW1lOiAncmRyTW9udGhOYW1lJyxcbiAgaW5maW5pdGVNb250aHM6ICdyZHJJbmZpbml0ZU1vbnRocycsXG4gIG1vbnRoc1ZlcnRpY2FsOiAncmRyTW9udGhzVmVydGljYWwnLFxuICBtb250aHNIb3Jpem9udGFsOiAncmRyTW9udGhzSG9yaXpvbnRhbCdcbn07Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kZWZhdWx0IiwiZGF0ZVJhbmdlV3JhcHBlciIsImNhbGVuZGFyV3JhcHBlciIsImRhdGVEaXNwbGF5IiwiZGF0ZURpc3BsYXlJdGVtIiwiZGF0ZURpc3BsYXlJdGVtQWN0aXZlIiwibW9udGhBbmRZZWFyV3JhcHBlciIsIm1vbnRoQW5kWWVhclBpY2tlcnMiLCJuZXh0UHJldkJ1dHRvbiIsIm1vbnRoIiwid2Vla0RheXMiLCJ3ZWVrRGF5IiwiZGF5cyIsImRheSIsImRheU51bWJlciIsImRheVBhc3NpdmUiLCJkYXlUb2RheSIsImRheVN0YXJ0T2ZXZWVrIiwiZGF5RW5kT2ZXZWVrIiwiZGF5U2VsZWN0ZWQiLCJkYXlEaXNhYmxlZCIsImRheVN0YXJ0T2ZNb250aCIsImRheUVuZE9mTW9udGgiLCJkYXlXZWVrZW5kIiwiZGF5U3RhcnRQcmV2aWV3IiwiZGF5SW5QcmV2aWV3IiwiZGF5RW5kUHJldmlldyIsImRheUhvdmVyZWQiLCJkYXlBY3RpdmUiLCJpblJhbmdlIiwiZW5kRWRnZSIsInN0YXJ0RWRnZSIsInByZXZCdXR0b24iLCJuZXh0QnV0dG9uIiwic2VsZWN0ZWQiLCJtb250aHMiLCJtb250aFBpY2tlciIsInllYXJQaWNrZXIiLCJkYXRlRGlzcGxheVdyYXBwZXIiLCJkZWZpbmVkUmFuZ2VzV3JhcHBlciIsInN0YXRpY1JhbmdlcyIsInN0YXRpY1JhbmdlIiwiaW5wdXRSYW5nZXMiLCJpbnB1dFJhbmdlIiwiaW5wdXRSYW5nZUlucHV0IiwiZGF0ZVJhbmdlUGlja2VyV3JhcHBlciIsInN0YXRpY1JhbmdlTGFiZWwiLCJzdGF0aWNSYW5nZVNlbGVjdGVkIiwibW9udGhOYW1lIiwiaW5maW5pdGVNb250aHMiLCJtb250aHNWZXJ0aWNhbCIsIm1vbnRoc0hvcml6b250YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/styles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-date-range/dist/utils.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calcFocusDate = calcFocusDate;\nexports.findNextRangeIndex = findNextRangeIndex;\nexports.generateStyles = generateStyles;\nexports.getMonthDisplayRange = getMonthDisplayRange;\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nvar _dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction calcFocusDate(currentFocusedDate, props) {\n    const { shownDate, date, months, ranges, focusedRange, displayMode } = props;\n    // find primary date according the props\n    let targetInterval;\n    if (displayMode === \"dateRange\") {\n        const range = ranges[focusedRange[0]] || {};\n        targetInterval = {\n            start: range.startDate,\n            end: range.endDate\n        };\n    } else {\n        targetInterval = {\n            start: date,\n            end: date\n        };\n    }\n    targetInterval.start = (0, _dateFns.startOfMonth)(targetInterval.start || new Date());\n    targetInterval.end = (0, _dateFns.endOfMonth)(targetInterval.end || targetInterval.start);\n    const targetDate = targetInterval.start || targetInterval.end || shownDate || new Date();\n    // initial focus\n    if (!currentFocusedDate) return shownDate || targetDate;\n    // // just return targetDate for native scrolled calendars\n    // if (props.scroll.enabled) return targetDate;\n    if ((0, _dateFns.differenceInCalendarMonths)(targetInterval.start, targetInterval.end) > months) {\n        // don't change focused if new selection in view area\n        return currentFocusedDate;\n    }\n    return targetDate;\n}\nfunction findNextRangeIndex(ranges) {\n    let currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const nextIndex = ranges.findIndex((range, i)=>i > currentRangeIndex && range.autoFocus !== false && !range.disabled);\n    if (nextIndex !== -1) return nextIndex;\n    return ranges.findIndex((range)=>range.autoFocus !== false && !range.disabled);\n}\nfunction getMonthDisplayRange(date, dateOptions, fixedHeight) {\n    const startDateOfMonth = (0, _dateFns.startOfMonth)(date, dateOptions);\n    const endDateOfMonth = (0, _dateFns.endOfMonth)(date, dateOptions);\n    const startDateOfCalendar = (0, _dateFns.startOfWeek)(startDateOfMonth, dateOptions);\n    let endDateOfCalendar = (0, _dateFns.endOfWeek)(endDateOfMonth, dateOptions);\n    if (fixedHeight && (0, _dateFns.differenceInCalendarDays)(endDateOfCalendar, startDateOfCalendar) <= 34) {\n        endDateOfCalendar = (0, _dateFns.addDays)(endDateOfCalendar, 7);\n    }\n    return {\n        start: startDateOfCalendar,\n        end: endDateOfCalendar,\n        startDateOfMonth,\n        endDateOfMonth\n    };\n}\nfunction generateStyles(sources) {\n    if (!sources.length) return {};\n    const generatedStyles = sources.filter((source)=>Boolean(source)).reduce((styles, styleSource)=>{\n        Object.keys(styleSource).forEach((key)=>{\n            styles[key] = (0, _classnames.default)(styles[key], styleSource[key]);\n        });\n        return styles;\n    }, {});\n    return generatedStyles;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/styles.css":
/*!*******************************************************!*\
  !*** ./node_modules/react-date-range/dist/styles.css ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"935ce42805ee\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3N0eWxlcy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kamFuZ29ibmIvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3N0eWxlcy5jc3M/MTI5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjkzNWNlNDI4MDVlZVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/styles.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-date-range/dist/theme/default.css":
/*!**************************************************************!*\
  !*** ./node_modules/react-date-range/dist/theme/default.css ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"1a2d603ce301\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZS1yYW5nZS9kaXN0L3RoZW1lL2RlZmF1bHQuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGphbmdvYm5iLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGUtcmFuZ2UvZGlzdC90aGVtZS9kZWZhdWx0LmNzcz83Yzk0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMWEyZDYwM2NlMzAxXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-date-range/dist/theme/default.css\n");

/***/ })

};
;