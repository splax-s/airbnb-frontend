/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-list";
exports.ids = ["vendor-chunks/react-list"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-list/react-list.js":
/*!***********************************************!*\
  !*** ./node_modules/react-list/react-list.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(global, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"),\n            __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else { var mod; }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function(_propTypes, _react) {\n    \"use strict\";\n    _propTypes = _interopRequireDefault(_propTypes);\n    _react = _interopRequireWildcard(_react);\n    var _class, _temp;\n    function _getRequireWildcardCache() {\n        if (typeof WeakMap !== \"function\") return null;\n        var cache = new WeakMap();\n        _getRequireWildcardCache = function _getRequireWildcardCache() {\n            return cache;\n        };\n        return cache;\n    }\n    function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        }\n        if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n            return {\n                \"default\": obj\n            };\n        }\n        var cache = _getRequireWildcardCache();\n        if (cache && cache.has(obj)) {\n            return cache.get(obj);\n        }\n        var newObj = {};\n        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var key in obj){\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n                if (desc && (desc.get || desc.set)) {\n                    Object.defineProperty(newObj, key, desc);\n                } else {\n                    newObj[key] = obj[key];\n                }\n            }\n        }\n        newObj[\"default\"] = obj;\n        if (cache) {\n            cache.set(obj, newObj);\n        }\n        return newObj;\n    }\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            \"default\": obj\n        };\n    }\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n                return typeof obj;\n            };\n        } else {\n            _typeof = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n        }\n        return _typeof(obj);\n    }\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n    function _defineProperties(target, props) {\n        for(var i = 0; i < props.length; i++){\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n    }\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) _setPrototypeOf(subClass, superClass);\n    }\n    function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n        };\n        return _setPrototypeOf(o, p);\n    }\n    function _createSuper(Derived) {\n        var hasNativeReflectConstruct = _isNativeReflectConstruct();\n        return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived), result;\n            if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n                result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n                result = Super.apply(this, arguments);\n            }\n            return _possibleConstructorReturn(this, result);\n        };\n    }\n    function _possibleConstructorReturn(self1, call) {\n        if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n        }\n        return _assertThisInitialized(self1);\n    }\n    function _assertThisInitialized(self1) {\n        if (self1 === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n        return self1;\n    }\n    function _isNativeReflectConstruct() {\n        if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (typeof Proxy === \"function\") return true;\n        try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    function _getPrototypeOf(o) {\n        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n        };\n        return _getPrototypeOf(o);\n    }\n    function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n        if (Object.getOwnPropertySymbols) {\n            var symbols = Object.getOwnPropertySymbols(object);\n            if (enumerableOnly) symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n            keys.push.apply(keys, symbols);\n        }\n        return keys;\n    }\n    function _objectSpread(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i] != null ? arguments[i] : {};\n            if (i % 2) {\n                ownKeys(Object(source), true).forEach(function(key) {\n                    _defineProperty(target, key, source[key]);\n                });\n            } else if (Object.getOwnPropertyDescriptors) {\n                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n            } else {\n                ownKeys(Object(source)).forEach(function(key) {\n                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n                });\n            }\n        }\n        return target;\n    }\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n        return obj;\n    }\n    var CLIENT_SIZE_KEYS = {\n        x: \"clientWidth\",\n        y: \"clientHeight\"\n    };\n    var CLIENT_START_KEYS = {\n        x: \"clientTop\",\n        y: \"clientLeft\"\n    };\n    var INNER_SIZE_KEYS = {\n        x: \"innerWidth\",\n        y: \"innerHeight\"\n    };\n    var OFFSET_SIZE_KEYS = {\n        x: \"offsetWidth\",\n        y: \"offsetHeight\"\n    };\n    var OFFSET_START_KEYS = {\n        x: \"offsetLeft\",\n        y: \"offsetTop\"\n    };\n    var OVERFLOW_KEYS = {\n        x: \"overflowX\",\n        y: \"overflowY\"\n    };\n    var SCROLL_SIZE_KEYS = {\n        x: \"scrollWidth\",\n        y: \"scrollHeight\"\n    };\n    var SCROLL_START_KEYS = {\n        x: \"scrollLeft\",\n        y: \"scrollTop\"\n    };\n    var SIZE_KEYS = {\n        x: \"width\",\n        y: \"height\"\n    };\n    var NOOP = function NOOP() {}; // If a browser doesn't support the `options` argument to\n    // add/removeEventListener, we need to check, otherwise we will\n    // accidentally set `capture` with a truthy value.\n    var PASSIVE = function() {\n        if (true) return false;\n        var hasSupport = false;\n        try {\n            document.createElement(\"div\").addEventListener(\"test\", NOOP, {\n                get passive () {\n                    hasSupport = true;\n                    return false;\n                }\n            });\n        } catch (e) {}\n        return hasSupport;\n    }() ? {\n        passive: true\n    } : false;\n    var UNSTABLE_MESSAGE = \"ReactList failed to reach a stable state.\";\n    var MAX_SYNC_UPDATES = 40;\n    var isEqualSubset = function isEqualSubset(a, b) {\n        for(var key in b){\n            if (a[key] !== b[key]) return false;\n        }\n        return true;\n    };\n    var defaultScrollParentGetter = function defaultScrollParentGetter(component) {\n        var axis = component.props.axis;\n        var el = component.getEl();\n        var overflowKey = OVERFLOW_KEYS[axis];\n        while(el = el.parentElement){\n            switch(window.getComputedStyle(el)[overflowKey]){\n                case \"auto\":\n                case \"scroll\":\n                case \"overlay\":\n                    return el;\n            }\n        }\n        return window;\n    };\n    var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {\n        var axis = component.props.axis;\n        var scrollParent = component.scrollParent;\n        return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];\n    };\n    var constrain = function constrain(props, state) {\n        var length = props.length, minSize = props.minSize, type = props.type;\n        var from = state.from, size = state.size, itemsPerRow = state.itemsPerRow;\n        size = Math.max(size, minSize);\n        var mod = size % itemsPerRow;\n        if (mod) size += itemsPerRow - mod;\n        if (size > length) size = length;\n        from = type === \"simple\" || !from ? 0 : Math.max(Math.min(from, length - size), 0);\n        if (mod = from % itemsPerRow) {\n            from -= mod;\n            size += mod;\n        }\n        if (from === state.from && size == state.size) return state;\n        return _objectSpread(_objectSpread({}, state), {}, {\n            from: from,\n            size: size\n        });\n    };\n    module.exports = (_temp = _class = /*#__PURE__*/ function(_Component) {\n        _inherits(ReactList, _Component);\n        var _super = _createSuper(ReactList);\n        _createClass(ReactList, null, [\n            {\n                key: \"getDerivedStateFromProps\",\n                value: function getDerivedStateFromProps(props, state) {\n                    var newState = constrain(props, state);\n                    return newState === state ? null : newState;\n                }\n            }\n        ]);\n        function ReactList(props) {\n            var _this;\n            _classCallCheck(this, ReactList);\n            _this = _super.call(this, props);\n            _this.state = constrain(props, {\n                itemsPerRow: 1,\n                from: props.initialIndex,\n                size: 0\n            });\n            _this.cache = {};\n            _this.cachedScrollPosition = null;\n            _this.prevPrevState = {};\n            _this.unstable = false;\n            _this.updateCounter = 0;\n            return _this;\n        }\n        _createClass(ReactList, [\n            {\n                key: \"componentDidMount\",\n                value: function componentDidMount() {\n                    this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);\n                    window.addEventListener(\"resize\", this.updateFrameAndClearCache);\n                    this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));\n                }\n            },\n            {\n                key: \"componentDidUpdate\",\n                value: function componentDidUpdate(prevProps) {\n                    var _this2 = this;\n                    // Viewport scroll is no longer useful if axis changes\n                    if (this.props.axis !== prevProps.axis) this.clearSizeCache(); // If the list has reached an unstable state, prevent an infinite loop.\n                    if (this.unstable) return;\n                    if (++this.updateCounter > MAX_SYNC_UPDATES) {\n                        this.unstable = true;\n                        return console.error(UNSTABLE_MESSAGE);\n                    }\n                    if (!this.updateCounterTimeoutId) {\n                        this.updateCounterTimeoutId = setTimeout(function() {\n                            _this2.updateCounter = 0;\n                            delete _this2.updateCounterTimeoutId;\n                        }, 0);\n                    }\n                    this.updateFrame();\n                }\n            },\n            {\n                key: \"maybeSetState\",\n                value: function maybeSetState(b, cb) {\n                    if (isEqualSubset(this.state, b)) return cb();\n                    this.setState(b, cb);\n                }\n            },\n            {\n                key: \"componentWillUnmount\",\n                value: function componentWillUnmount() {\n                    window.removeEventListener(\"resize\", this.updateFrameAndClearCache);\n                    this.scrollParent.removeEventListener(\"scroll\", this.updateFrameAndClearCache, PASSIVE);\n                    this.scrollParent.removeEventListener(\"mousewheel\", NOOP, PASSIVE);\n                }\n            },\n            {\n                key: \"getOffset\",\n                value: function getOffset(el) {\n                    var axis = this.props.axis;\n                    var offset = el[CLIENT_START_KEYS[axis]] || 0;\n                    var offsetKey = OFFSET_START_KEYS[axis];\n                    do {\n                        offset += el[offsetKey] || 0;\n                    }while (el = el.offsetParent);\n                    return offset;\n                }\n            },\n            {\n                key: \"getEl\",\n                value: function getEl() {\n                    return this.el || this.items;\n                }\n            },\n            {\n                key: \"getScrollPosition\",\n                value: function getScrollPosition() {\n                    // Cache scroll position as this causes a forced synchronous layout.\n                    if (typeof this.cachedScrollPosition === \"number\") {\n                        return this.cachedScrollPosition;\n                    }\n                    var scrollParent = this.scrollParent;\n                    var axis = this.props.axis;\n                    var scrollKey = SCROLL_START_KEYS[axis];\n                    var actual = scrollParent === window ? // always return document.documentElement[scrollKey] as 0, so take\n                    // whichever has a value.\n                    document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];\n                    var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);\n                    var scroll = Math.max(0, Math.min(actual, max));\n                    var el = this.getEl();\n                    this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);\n                    return this.cachedScrollPosition;\n                }\n            },\n            {\n                key: \"setScroll\",\n                value: function setScroll(offset) {\n                    var scrollParent = this.scrollParent;\n                    var axis = this.props.axis;\n                    offset += this.getOffset(this.getEl());\n                    if (scrollParent === window) return window.scrollTo(0, offset);\n                    offset -= this.getOffset(this.scrollParent);\n                    scrollParent[SCROLL_START_KEYS[axis]] = offset;\n                }\n            },\n            {\n                key: \"getScrollSize\",\n                value: function getScrollSize() {\n                    var scrollParent = this.scrollParent;\n                    var _document = document, body = _document.body, documentElement = _document.documentElement;\n                    var key = SCROLL_SIZE_KEYS[this.props.axis];\n                    return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];\n                }\n            },\n            {\n                key: \"hasDeterminateSize\",\n                value: function hasDeterminateSize() {\n                    var _this$props = this.props, itemSizeGetter = _this$props.itemSizeGetter, type = _this$props.type;\n                    return type === \"uniform\" || itemSizeGetter;\n                }\n            },\n            {\n                key: \"getStartAndEnd\",\n                value: function getStartAndEnd() {\n                    var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;\n                    var scroll = this.getScrollPosition();\n                    var start = Math.max(0, scroll - threshold);\n                    var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;\n                    if (this.hasDeterminateSize()) {\n                        end = Math.min(end, this.getSpaceBefore(this.props.length));\n                    }\n                    return {\n                        start: start,\n                        end: end\n                    };\n                }\n            },\n            {\n                key: \"getItemSizeAndItemsPerRow\",\n                value: function getItemSizeAndItemsPerRow() {\n                    var _this$props2 = this.props, axis = _this$props2.axis, useStaticSize = _this$props2.useStaticSize;\n                    var _this$state = this.state, itemSize = _this$state.itemSize, itemsPerRow = _this$state.itemsPerRow;\n                    if (useStaticSize && itemSize && itemsPerRow) {\n                        return {\n                            itemSize: itemSize,\n                            itemsPerRow: itemsPerRow\n                        };\n                    }\n                    var itemEls = this.items.children;\n                    if (!itemEls.length) return {};\n                    var firstEl = itemEls[0]; // Firefox has a problem where it will return a *slightly* (less than\n                    // thousandths of a pixel) different size for the same element between\n                    // renders. This can cause an infinite render loop, so only change the\n                    // itemSize when it is significantly different.\n                    var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];\n                    var delta = Math.abs(firstElSize - itemSize);\n                    if (isNaN(delta) || delta >= 1) itemSize = firstElSize;\n                    if (!itemSize) return {};\n                    var startKey = OFFSET_START_KEYS[axis];\n                    var firstStart = firstEl[startKey];\n                    itemsPerRow = 1;\n                    for(var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]){\n                        ++itemsPerRow;\n                    }\n                    return {\n                        itemSize: itemSize,\n                        itemsPerRow: itemsPerRow\n                    };\n                }\n            },\n            {\n                key: \"clearSizeCache\",\n                value: function clearSizeCache() {\n                    this.cachedScrollPosition = null;\n                } // Called by 'scroll' and 'resize' events, clears scroll position cache.\n            },\n            {\n                key: \"updateFrameAndClearCache\",\n                value: function updateFrameAndClearCache(cb) {\n                    this.clearSizeCache();\n                    return this.updateFrame(cb);\n                }\n            },\n            {\n                key: \"updateFrame\",\n                value: function updateFrame(cb) {\n                    this.updateScrollParent();\n                    if (typeof cb != \"function\") cb = NOOP;\n                    switch(this.props.type){\n                        case \"simple\":\n                            return this.updateSimpleFrame(cb);\n                        case \"variable\":\n                            return this.updateVariableFrame(cb);\n                        case \"uniform\":\n                            return this.updateUniformFrame(cb);\n                    }\n                }\n            },\n            {\n                key: \"updateScrollParent\",\n                value: function updateScrollParent() {\n                    var prev = this.scrollParent;\n                    this.scrollParent = this.props.scrollParentGetter(this);\n                    if (prev === this.scrollParent) return;\n                    if (prev) {\n                        prev.removeEventListener(\"scroll\", this.updateFrameAndClearCache);\n                        prev.removeEventListener(\"mousewheel\", NOOP);\n                    } // If we have a new parent, cached parent dimensions are no longer useful.\n                    this.clearSizeCache();\n                    this.scrollParent.addEventListener(\"scroll\", this.updateFrameAndClearCache, PASSIVE); // You have to attach mousewheel listener to the scrollable element.\n                    // Just an empty listener. After that onscroll events will be fired synchronously.\n                    this.scrollParent.addEventListener(\"mousewheel\", NOOP, PASSIVE);\n                }\n            },\n            {\n                key: \"updateSimpleFrame\",\n                value: function updateSimpleFrame(cb) {\n                    var _this$getStartAndEnd = this.getStartAndEnd(), end = _this$getStartAndEnd.end;\n                    var itemEls = this.items.children;\n                    var elEnd = 0;\n                    if (itemEls.length) {\n                        var axis = this.props.axis;\n                        var firstItemEl = itemEls[0];\n                        var lastItemEl = itemEls[itemEls.length - 1];\n                        elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);\n                    }\n                    if (elEnd > end) return cb();\n                    var _this$props3 = this.props, pageSize = _this$props3.pageSize, length = _this$props3.length;\n                    var size = Math.min(this.state.size + pageSize, length);\n                    this.maybeSetState({\n                        size: size\n                    }, cb);\n                }\n            },\n            {\n                key: \"updateVariableFrame\",\n                value: function updateVariableFrame(cb) {\n                    if (!this.props.itemSizeGetter) this.cacheSizes();\n                    var _this$getStartAndEnd2 = this.getStartAndEnd(), start = _this$getStartAndEnd2.start, end = _this$getStartAndEnd2.end;\n                    var _this$props4 = this.props, length = _this$props4.length, pageSize = _this$props4.pageSize;\n                    var space = 0;\n                    var from = 0;\n                    var size = 0;\n                    var maxFrom = length - 1;\n                    while(from < maxFrom){\n                        var itemSize = this.getSizeOfItem(from);\n                        if (itemSize == null || space + itemSize > start) break;\n                        space += itemSize;\n                        ++from;\n                    }\n                    var maxSize = length - from;\n                    while(size < maxSize && space < end){\n                        var _itemSize = this.getSizeOfItem(from + size);\n                        if (_itemSize == null) {\n                            size = Math.min(size + pageSize, maxSize);\n                            break;\n                        }\n                        space += _itemSize;\n                        ++size;\n                    }\n                    this.maybeSetState(constrain(this.props, {\n                        from: from,\n                        itemsPerRow: 1,\n                        size: size\n                    }), cb);\n                }\n            },\n            {\n                key: \"updateUniformFrame\",\n                value: function updateUniformFrame(cb) {\n                    var _this$getItemSizeAndI = this.getItemSizeAndItemsPerRow(), itemSize = _this$getItemSizeAndI.itemSize, itemsPerRow = _this$getItemSizeAndI.itemsPerRow;\n                    if (!itemSize || !itemsPerRow) return cb();\n                    var _this$getStartAndEnd3 = this.getStartAndEnd(), start = _this$getStartAndEnd3.start, end = _this$getStartAndEnd3.end;\n                    var _constrain = constrain(this.props, {\n                        from: Math.floor(start / itemSize) * itemsPerRow,\n                        size: (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow,\n                        itemsPerRow: itemsPerRow\n                    }), from = _constrain.from, size = _constrain.size;\n                    return this.maybeSetState({\n                        itemsPerRow: itemsPerRow,\n                        from: from,\n                        itemSize: itemSize,\n                        size: size\n                    }, cb);\n                }\n            },\n            {\n                key: \"getSpaceBefore\",\n                value: function getSpaceBefore(index) {\n                    var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                    if (cache[index] != null) return cache[index]; // Try the static itemSize.\n                    var _this$state2 = this.state, itemSize = _this$state2.itemSize, itemsPerRow = _this$state2.itemsPerRow;\n                    if (itemSize) {\n                        return cache[index] = Math.floor(index / itemsPerRow) * itemSize;\n                    } // Find the closest space to index there is a cached value for.\n                    var from = index;\n                    while(from > 0 && cache[--from] == null){\n                        ;\n                    } // Finally, accumulate sizes of items from - index.\n                    var space = cache[from] || 0;\n                    for(var i = from; i < index; ++i){\n                        cache[i] = space;\n                        var _itemSize2 = this.getSizeOfItem(i);\n                        if (_itemSize2 == null) break;\n                        space += _itemSize2;\n                    }\n                    return cache[index] = space;\n                }\n            },\n            {\n                key: \"cacheSizes\",\n                value: function cacheSizes() {\n                    var cache = this.cache;\n                    var from = this.state.from;\n                    var itemEls = this.items.children;\n                    var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];\n                    for(var i = 0, l = itemEls.length; i < l; ++i){\n                        cache[from + i] = itemEls[i][sizeKey];\n                    }\n                }\n            },\n            {\n                key: \"getSizeOfItem\",\n                value: function getSizeOfItem(index) {\n                    var cache = this.cache, items = this.items;\n                    var _this$props5 = this.props, axis = _this$props5.axis, itemSizeGetter = _this$props5.itemSizeGetter, itemSizeEstimator = _this$props5.itemSizeEstimator, type = _this$props5.type;\n                    var _this$state3 = this.state, from = _this$state3.from, itemSize = _this$state3.itemSize, size = _this$state3.size; // Try the static itemSize.\n                    if (itemSize) return itemSize; // Try the itemSizeGetter.\n                    if (itemSizeGetter) return itemSizeGetter(index); // Try the cache.\n                    if (index in cache) return cache[index]; // Try the DOM.\n                    if (type === \"simple\" && index >= from && index < from + size && items) {\n                        var itemEl = items.children[index - from];\n                        if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];\n                    } // Try the itemSizeEstimator.\n                    if (itemSizeEstimator) return itemSizeEstimator(index, cache);\n                }\n            },\n            {\n                key: \"scrollTo\",\n                value: function scrollTo(index) {\n                    if (index != null) this.setScroll(this.getSpaceBefore(index));\n                }\n            },\n            {\n                key: \"scrollAround\",\n                value: function scrollAround(index) {\n                    var current = this.getScrollPosition();\n                    var bottom = this.getSpaceBefore(index);\n                    var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);\n                    var min = Math.min(top, bottom);\n                    var max = Math.max(top, bottom);\n                    if (current <= min) return this.setScroll(min);\n                    if (current > max) return this.setScroll(max);\n                }\n            },\n            {\n                key: \"getVisibleRange\",\n                value: function getVisibleRange() {\n                    var _this$state4 = this.state, from = _this$state4.from, size = _this$state4.size;\n                    var _this$getStartAndEnd4 = this.getStartAndEnd(0), start = _this$getStartAndEnd4.start, end = _this$getStartAndEnd4.end;\n                    var cache = {};\n                    var first, last;\n                    for(var i = from; i < from + size; ++i){\n                        var itemStart = this.getSpaceBefore(i, cache);\n                        var itemEnd = itemStart + this.getSizeOfItem(i);\n                        if (first == null && itemEnd > start) first = i;\n                        if (first != null && itemStart < end) last = i;\n                    }\n                    return [\n                        first,\n                        last\n                    ];\n                }\n            },\n            {\n                key: \"renderItems\",\n                value: function renderItems() {\n                    var _this3 = this;\n                    var _this$props6 = this.props, itemRenderer = _this$props6.itemRenderer, itemsRenderer = _this$props6.itemsRenderer;\n                    var _this$state5 = this.state, from = _this$state5.from, size = _this$state5.size;\n                    var items = [];\n                    for(var i = 0; i < size; ++i){\n                        items.push(itemRenderer(from + i, i));\n                    }\n                    return itemsRenderer(items, function(c) {\n                        return _this3.items = c;\n                    });\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this4 = this;\n                    var _this$props7 = this.props, axis = _this$props7.axis, length = _this$props7.length, type = _this$props7.type, useTranslate3d = _this$props7.useTranslate3d;\n                    var _this$state6 = this.state, from = _this$state6.from, itemsPerRow = _this$state6.itemsPerRow;\n                    var items = this.renderItems();\n                    if (type === \"simple\") return items;\n                    var style = {\n                        position: \"relative\"\n                    };\n                    var cache = {};\n                    var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;\n                    var size = this.getSpaceBefore(bottom, cache);\n                    if (size) {\n                        style[SIZE_KEYS[axis]] = size;\n                        if (axis === \"x\") style.overflowX = \"hidden\";\n                    }\n                    var offset = this.getSpaceBefore(from, cache);\n                    var x = axis === \"x\" ? offset : 0;\n                    var y = axis === \"y\" ? offset : 0;\n                    var transform = useTranslate3d ? \"translate3d(\".concat(x, \"px, \").concat(y, \"px, 0)\") : \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n                    var listStyle = {\n                        msTransform: transform,\n                        WebkitTransform: transform,\n                        transform: transform\n                    };\n                    return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                        style: style,\n                        ref: function ref(c) {\n                            return _this4.el = c;\n                        }\n                    }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                        style: listStyle\n                    }, items));\n                }\n            }\n        ]);\n        return ReactList;\n    }(_react.Component), _defineProperty(_class, \"displayName\", \"ReactList\"), _defineProperty(_class, \"propTypes\", {\n        axis: _propTypes[\"default\"].oneOf([\n            \"x\",\n            \"y\"\n        ]),\n        initialIndex: _propTypes[\"default\"].number,\n        itemRenderer: _propTypes[\"default\"].func,\n        itemSizeEstimator: _propTypes[\"default\"].func,\n        itemSizeGetter: _propTypes[\"default\"].func,\n        itemsRenderer: _propTypes[\"default\"].func,\n        length: _propTypes[\"default\"].number,\n        minSize: _propTypes[\"default\"].number,\n        pageSize: _propTypes[\"default\"].number,\n        scrollParentGetter: _propTypes[\"default\"].func,\n        scrollParentViewportSizeGetter: _propTypes[\"default\"].func,\n        threshold: _propTypes[\"default\"].number,\n        type: _propTypes[\"default\"].oneOf([\n            \"simple\",\n            \"variable\",\n            \"uniform\"\n        ]),\n        useStaticSize: _propTypes[\"default\"].bool,\n        useTranslate3d: _propTypes[\"default\"].bool\n    }), _defineProperty(_class, \"defaultProps\", {\n        axis: \"y\",\n        itemRenderer: function itemRenderer(index, key) {\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                key: key\n            }, index);\n        },\n        itemsRenderer: function itemsRenderer(items, ref) {\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                ref: ref\n            }, items);\n        },\n        length: 0,\n        minSize: 1,\n        pageSize: 10,\n        scrollParentGetter: defaultScrollParentGetter,\n        scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,\n        threshold: 100,\n        type: \"simple\",\n        useStaticSize: false,\n        useTranslate3d: false\n    }), _temp);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-list/react-list.js\n");

/***/ })

};
;